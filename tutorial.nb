(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    104675,       2215]
NotebookOptionsPosition[     94697,       2046]
NotebookOutlinePosition[     95133,       2063]
CellTagsIndexPosition[     95090,       2060]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Progetto Matematica Computazionale", "Title",
 CellChangeTimes->{{3.890750962823655*^9, 3.8907509885064335`*^9}},
 TextAlignment->Center,ExpressionUUID->"5a1f2e26-4b6a-4ea3-9804-de30c40d3e08"],

Cell[TextData[StyleBox["Esercizio di Analisi Sintattica",
 FontSize->27]], "Subtitle",
 CellChangeTimes->{{3.8907509951285677`*^9, 3.8907510019691195`*^9}, {
  3.8907520475013933`*^9, 3.8907520477532053`*^9}},
 TextAlignment->Center,ExpressionUUID->"bb67af07-e1ff-49b5-87b6-4fa053c91c67"],

Cell[TextData[{
 StyleBox["Gruppo LLGSA",
  FontSize->20,
  FontSlant->"Italic"],
 StyleBox["\nMC 2022/2023",
  FontSize->20]
}], "Text",
 CellChangeTimes->{{3.8907510714718204`*^9, 3.890751099306947*^9}, {
  3.8907518262120275`*^9, 3.890751848177871*^9}, {3.8907518798245273`*^9, 
  3.8907518861619463`*^9}, {3.893237150939942*^9, 3.8932371535421133`*^9}, {
  3.8932371972024713`*^9, 3.8932372300782127`*^9}},
 TextAlignment->Center,ExpressionUUID->"2cdba1a7-404c-4d69-8992-032295e035a9"],

Cell[TextData[StyleBox["[FOTO]",
 FontSlant->"Italic"]], "Text",
 CellChangeTimes->{{3.8907519302475586`*^9, 3.8907519308097343`*^9}, {
  3.893237238842496*^9, 3.893237240511161*^9}},
 TextAlignment->Center,ExpressionUUID->"976b1111-432e-4e8a-94c9-20958d8eff75"],

Cell[TextData[{
 "Lorenzo Campidelli, Luca Castricini, Gianluca Gueli, Sonia Nicoletti, Anna \
Tosoroni\n",
 StyleBox["anno 1 curriculum C, anno 1 curriculum A, anno 1 curriculum B, \
anno 1 curriculum B, anno 1 curriculum A",
  FontSize->13]
}], "Text",
 CellChangeTimes->{{3.8907511091736736`*^9, 3.8907511254724493`*^9}, {
  3.890751158485685*^9, 3.890751250820182*^9}, {3.890751845599101*^9, 
  3.8907518464383917`*^9}, {3.8907519333724127`*^9, 3.8907519355702925`*^9}, {
  3.8932371376546803`*^9, 3.8932371688285217`*^9}, {3.8934809410947*^9, 
  3.8934809414386854`*^9}, {3.8935817224559097`*^9, 3.8935817280806665`*^9}},
 TextAlignment->Center,ExpressionUUID->"9274d549-7f68-4c12-8069-8ce7ef4449e9"],

Cell[CellGroupData[{

Cell["Indice", "Section",
 CellChangeTimes->{{3.8907513787584734`*^9, 
  3.8907513797545824`*^9}},ExpressionUUID->"b994f387-a12f-4dc4-a2dc-\
dab7aa7f8d43"],

Cell[TextData[{
 StyleBox["Introduzione\nI. Analisi Sintattica",
  FontSize->16],
 "\n",
 StyleBox["\t1.1 Analisi sintattica e grammatiche\n\t1.2 \
Cos\[CloseCurlyQuote]\[EGrave] la grammatica LL(1)\n\t1.3 Parsing",
  FontSize->14],
 "\n",
 StyleBox["II. Nullable",
  FontSize->16],
 "\n",
 StyleBox["\t2.1 Cos\[CloseCurlyQuote]\[EGrave] l\[CloseCurlyQuote]insieme \
Nullable\n\t2.2 Come si genera\n\t2.3 Esempi",
  FontSize->14],
 "\n",
 StyleBox["III. First",
  FontSize->16],
 "\n",
 StyleBox["\t3.1 Cos\[CloseCurlyQuote]\[EGrave] l\[CloseCurlyQuote]insieme \
First\n\t3.2 Come si genera\n\t3.3 Esempi",
  FontSize->14],
 "\n",
 StyleBox["IV. Follow",
  FontSize->16],
 "\n",
 StyleBox["\t4.1 Cos\[CloseCurlyQuote]\[EGrave] l\[CloseCurlyQuote]insieme \
Follow\n\t4.2 Come si genera\n\t4.3 Esempi",
  FontSize->14],
 "\n",
 StyleBox["V. Tabella di Parsing",
  FontSize->16],
 "\n",
 StyleBox["\t5.1 Cos\[CloseCurlyQuote]\[EGrave] la tabella di parsing\n\t5.2 \
Come si completa\n\t5.3 Esempi",
  FontSize->14],
 "\n",
 StyleBox["VI. Esercizio",
  FontSize->16],
 "\n",
 StyleBox["\t6.1 In cosa consiste l\[CloseCurlyQuote]esercizio  \n\t6.2 \
Funzionalit\[AGrave] dell\[CloseCurlyQuote]interfaccia",
  FontSize->14],
 "\nVII",
 StyleBox[". Bibliografia e Sitografia\nVIII. Commenti e Lavoro Futuro",
  FontSize->16]
}], "Text",
 CellChangeTimes->{{3.890751650145605*^9, 3.8907517169405155`*^9}, {
   3.8932255262951155`*^9, 3.8932256964518366`*^9}, {3.8932257712571754`*^9, 
   3.89322590760499*^9}, {3.8932259848980007`*^9, 3.8932259960145082`*^9}, {
   3.8932267578836594`*^9, 3.893226768519039*^9}, {3.893226979723595*^9, 
   3.893226987407835*^9}, {3.893227028831957*^9, 3.893227029464725*^9}, {
   3.8932272248399487`*^9, 3.8932272505569572`*^9}, {3.893227290696949*^9, 
   3.8932273072145576`*^9}, {3.893227351754671*^9, 3.8932274562087345`*^9}, {
   3.8932275418836803`*^9, 3.8932275502128973`*^9}, {3.8932374047493486`*^9, 
   3.893237407325387*^9}, {3.893237458909892*^9, 3.8932374630783324`*^9}, {
   3.893298733609008*^9, 3.893298758463929*^9}, {3.8933011780710473`*^9, 
   3.8933012335210238`*^9}, 3.8933013773308015`*^9, 3.8933041503329535`*^9, {
   3.8934808902622824`*^9, 3.893480913512925*^9}, {3.8934963115893393`*^9, 
   3.893496322651044*^9}, {3.8935016958575897`*^9, 
   3.8935016971156*^9}},ExpressionUUID->"2588153c-a80c-4091-ba49-\
2da0194dd30f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Introduzione", "Section",
 CellChangeTimes->{{3.8907513867783594`*^9, 
  3.8907513882472687`*^9}},ExpressionUUID->"65fbb34a-22dc-40c9-b3dd-\
8d79751a7c6a"],

Cell["\<\
Questo pacchetto contiene un generatore di esercizi sul parsing di \
grammatiche LL(1) nell\[CloseCurlyQuote]ambito dei linguaggi di programmazione.
L\[CloseCurlyQuote]obiettivo \[EGrave] quello di familiarizzare l\
\[CloseCurlyQuote]utente con il procedimento per la risoluzione di questa \
tipologia di esercizio. 
L\[CloseCurlyQuote]esercizio consiste, come prima cosa, nel generare gli \
insiemi Nullable, First e Follow associati a ogni simbolo non terminale della \
grammatica data e successivamente nella compilazione di una tabella di \
parsing. 
Il tutorial mette in evidenza tutti i passaggi del compilatore necessari a \
verificare la correttezza di una stringa del linguaggio generato da una \
grammatica in maniera non ambigua.
Il pacchetto prevede anche una verifica della soluzione fornita cos\[IGrave] \
da ricevere un feedback immediato per migliorare le abilit\[AGrave] nelle \
fasi pi\[UGrave] ostiche.
Le grammatiche generate dal pacchetto sono abbastanza semplici, in modo da \
garantire che siano sempre di tipo LL(1). In pi\[UGrave], ci\[OGrave] \
permette all\[CloseCurlyQuote]utente di concentrarsi sulle fasi di \
risoluzione in modo da abituarsi al procedimento e renderlo quasi automatico \
una volta che si passa ad osservare delle grammatiche pi\[UGrave] complesse. 
Il pacchetto \[EGrave] adatto a chi si approccia a questo argomento di \
linguaggi di programmazione, in particolare per studenti di informatica che \
frequentano un corso di linguaggi per la prima volta.\
\>", "Text",
 CellChangeTimes->{{3.8907517249591913`*^9, 3.890751725235973*^9}, {
  3.893227001502784*^9, 3.8932271046996274`*^9}, {3.893478500010079*^9, 
  3.89347850088573*^9}, {3.8934801505798798`*^9, 3.8934801692027307`*^9}, {
  3.89348021981164*^9, 3.893480220092758*^9}, {3.8934802967662787`*^9, 
  3.8934802975012417`*^9}, {3.893480356801711*^9, 3.8934805923144026`*^9}, {
  3.8934806247123427`*^9, 3.8934807546620727`*^9}, {3.89348078709247*^9, 
  3.893480849431464*^9}},ExpressionUUID->"fb2c88f0-c1a6-4e3a-aa88-\
2663a01cd7f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["I. Analisi Sintattica", "Section",
 CellChangeTimes->{{3.8907513973129363`*^9, 3.890751399886715*^9}, {
  3.893327547055324*^9, 
  3.8933275525596113`*^9}},ExpressionUUID->"2064ed3a-6554-4335-b298-\
0e7d33e63446"],

Cell[CellGroupData[{

Cell["1.1 Analisi sintattica e grammatiche", "Subsection",
 CellChangeTimes->{{3.890751485035192*^9, 3.890751504746661*^9}, {
   3.890751574160438*^9, 3.8907515750480895`*^9}, {3.890751609313715*^9, 
   3.8907516107036943`*^9}, {3.89332756292684*^9, 3.8933275720520744`*^9}, 
   3.893327756613449*^9, {3.893329374782858*^9, 3.8933293818402233`*^9}, {
   3.8934785371030645`*^9, 
   3.8934785375261736`*^9}},ExpressionUUID->"cff70c90-21a6-4a19-ad04-\
2134c5b48c8f"],

Cell["\<\
In ambito di linguaggi di programmazione, l\[CloseCurlyQuote]analisi \
sintattica \[EGrave] la fase del processo di compilazione in cui si verifica \
la correttezza di una stringa, ovvero, se \[EGrave] possibile creare tale \
stringa rispettando tutte le regole di scrittura che compongono il linguaggio \
stesso. Ad esempio, nel linguaggio composto da stringhe contenenti solamente \
il carattere \[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] la stringa \
\[OpenCurlyDoubleQuote]aaab\[CloseCurlyDoubleQuote] \[EGrave] sintatticamente \
errata. 
L\[CloseCurlyQuote]analisi sintattica serve quindi a verificare che le regole \
di sintassi siano rispettate e applicate correttamente. Queste regole vengono \
solitamente descritte dalla grammatica che definisce il linguaggio.

Una grammatica G \[EGrave] descritta da una quadrupla G =(N, T, P, S), dove:
\t- N \[EGrave] l\[CloseCurlyQuote]insieme di simboli Non Terminali, che \
possono essere riscritti nelle loro produzioni
\t- T \[EGrave] l\[CloseCurlyQuote]insieme di simboli Terminali che \
compongono le stringhe generate dalla grammatica
\t- P \[EGrave] l\[CloseCurlyQuote]insieme di produzioni dei simboli Non \
Terminali
\t- S \[EGrave] il simbolo Non Terminale dal quale iniziare a sviluppare le \
produzioni

Nei seguenti esempi useremo lettere maiuscole per identificare i simboli non \
terminali e lettere minuscole per i simboli terminali.

Ad esempio la grammatica G1 = ({A, B}, {a, b}, P, \[OpenCurlyDoubleQuote]A\
\[CloseCurlyDoubleQuote]) con P:\
\>", "Text",
 CellChangeTimes->{{3.89075151167789*^9, 3.890751511958028*^9}, {
   3.8933288352573605`*^9, 3.8933288358331833`*^9}, {3.893329220712124*^9, 
   3.8933293539055185`*^9}, {3.893329419175502*^9, 3.8933294711114902`*^9}, {
   3.8933296146231923`*^9, 3.893329615438958*^9}, {3.893329741598015*^9, 
   3.893329844262407*^9}, {3.8933299053332767`*^9, 3.893329942286137*^9}, {
   3.8933299742614*^9, 3.8933300554932814`*^9}, {3.8933301444204006`*^9, 
   3.893330209004631*^9}, {3.8933303554517713`*^9, 3.893330356310684*^9}, {
   3.8933305503996944`*^9, 3.893330565963411*^9}, {3.89333063034707*^9, 
   3.893330662570821*^9}, {3.8933309040183315`*^9, 3.893331087185275*^9}, {
   3.8933311377128334`*^9, 3.8933312390567646`*^9}, {3.893331278840555*^9, 
   3.893331299440464*^9}, {3.8934785620270877`*^9, 3.893478571797079*^9}, {
   3.8934786024414015`*^9, 3.8934786030048065`*^9}, {3.893478700721707*^9, 
   3.8934787573248773`*^9}, {3.893478792145529*^9, 3.8934788299864435`*^9}, 
   3.893478936380767*^9, {3.8934790096281815`*^9, 
   3.8934790396519957`*^9}},ExpressionUUID->"831cc4ee-6cc3-429b-99df-\
c844d749d142"],

Cell[BoxData[
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"A", " ", "->", " ", 
    RowBox[{"aBA", " ", "|", " ", "a"}]}], "\[IndentingNewLine]", "\t\t", 
   RowBox[{"B", " ", "->", " ", 
    RowBox[{"bB", " ", "|", " ", "\[Epsilon]"}]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.8933303726042433`*^9, 3.8933304996837273`*^9}, {
  3.8933316210722055`*^9, 
  3.89333162291247*^9}},ExpressionUUID->"2524ca1b-2af3-4218-b837-\
a3dbbb5a345a"],

Cell["\<\
descrive un linguaggio di stringhe composte dai caratteri \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] e \[OpenCurlyDoubleQuote]b\
\[CloseCurlyDoubleQuote] ma che devono iniziare e terminare con \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote].
Il simbolo \[Epsilon] indica una produzione vuota, cio\[EGrave] che non \
genera nessun Terminale e non si sviluppa in altri Non Terminali. La \
notazione | separa le diverse produzioni di un Non Teminale.

In particolare, le grammatiche a cui ci stiamo riferendo sono definite \
\[OpenCurlyDoubleQuote]context-free\[CloseCurlyDoubleQuote]. Queste \
grammatiche hanno la caratteristica di esprimere ogni regola sintattica sotto \
forma di derivazione di un simbolo a sinistra a partire da uno o pi\[UGrave] \
simboli a destra. Nell\[CloseCurlyQuote]esempio precedente il simbolo non \
terminale A pu\[OGrave] sempre essere sostituito da \
\[OpenCurlyDoubleQuote]aBA\[CloseCurlyDoubleQuote] o da \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote], indipendentemente dai \
simboli che lo precedono o lo seguono. 

Con questa grammatica la stringa \[OpenCurlyDoubleQuote]aababba\
\[CloseCurlyDoubleQuote] viene prodotta come:\
\>", "Text",
 CellChangeTimes->{
  3.893330513150358*^9, {3.893330573274949*^9, 3.893330612595049*^9}, {
   3.893331307617669*^9, 3.8933313664004126`*^9}, {3.893331586151492*^9, 
   3.8933316125595903`*^9}, {3.893332649923526*^9, 3.8933326802268963`*^9}, {
   3.893332750850952*^9, 3.8933328554345655`*^9}, {3.893480057067459*^9, 
   3.893480058349077*^9}, {3.893480094938877*^9, 
   3.8934801251173506`*^9}},ExpressionUUID->"9595033e-f004-4aa0-aaf3-\
e50054ea31e4"],

Cell[BoxData[
 RowBox[{"A", " ", "->", " ", 
  RowBox[{"aBA", " ", "->", " ", 
   RowBox[{"aA", " ", "->", " ", 
    RowBox[{"aaBA", " ", "->", " ", 
     RowBox[{"aabBA", " ", "->", " ", 
      RowBox[{"aabA", " ", "->", " ", 
       RowBox[{"aabaBA", " ", "->", " ", 
        RowBox[{"aababBA", " ", "->", " ", 
         RowBox[{"aababbBA", " ", "->", " ", 
          RowBox[{
          "aababbA", " ", "->", " ", 
           "aababba"}]}]}]}]}]}]}]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.8933328872642536`*^9, 3.893332968459012*^9}, {
  3.893333012242566*^9, 
  3.893333075522873*^9}},ExpressionUUID->"69efaa76-cd62-441d-9972-\
a5f803b9778b"],

Cell["mentre la stringa \[OpenCurlyDoubleQuote]aab\[CloseCurlyDoubleQuote] \
non pu\[OGrave] essere prodotta:", "Text",
 CellChangeTimes->{{3.8933331607775564`*^9, 
  3.8933331846169996`*^9}},ExpressionUUID->"7f70c12b-588f-4672-8e7c-\
ec43550a3389"],

Cell[BoxData[
 RowBox[{"A", " ", "->", " ", 
  RowBox[{"aBA", " ", "->", " ", 
   RowBox[{"aA", " ", "->", " ", 
    RowBox[{"aaBA", " ", "->", " ", 
     RowBox[{"aabBA", " ", "->", " ", "aabA"}]}]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.893333197822616*^9, 
  3.893333248361782*^9}},ExpressionUUID->"0863eee6-c5bf-4963-9fc5-\
b8476c0154a0"],

Cell["\<\
perch\[EGrave] \[OpenCurlyDoubleQuote]A\[CloseCurlyDoubleQuote] non ha una \
produzione \[Epsilon].

Per semplicit\[AGrave] una grammatica viene solamente descritta dal suo \
insieme di produzioni, che contiene tutti i simboli Non Terminali e tutti i \
simboli Terminali, con il simbolo iniziale scritto per primo.\
\>", "Text",
 CellChangeTimes->{{3.893333253752804*^9, 3.8933332676413565`*^9}, {
  3.893333334808629*^9, 3.8933333349125905`*^9}, {3.8933344041884503`*^9, 
  3.893334486724623*^9}, {3.8933345308763905`*^9, 
  3.8933345523906565`*^9}},ExpressionUUID->"caeb19c3-fba8-4ba8-bc24-\
c954cf4b54c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.2 Cos\[CloseCurlyQuote]\[EGrave] una grammatica LL(1)", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
  3.8907516134669905`*^9, 3.890751614743664*^9}, {3.89332773295113*^9, 
  3.8933277554699087`*^9}, {3.8934785401994123`*^9, 
  3.8934785402775307`*^9}},ExpressionUUID->"6005e3bd-6347-4db0-bc5d-\
0a01aa95e20e"],

Cell["\<\
Per capire come viene generata una stringa \[EGrave] quindi necessario \
leggere i caratteri che la compongono e trovare la produzione che genera \
quella serie di caratteri. 

In questi esercizi siamo interessati ad un tipo particolare di grammatiche, \
dette LL(1), dove la prima L indica lettura della stringa in input Left to \
right, la seconda L indica Leftmost derivation cio\[EGrave] l\
\[CloseCurlyQuote]ordine delle produzioni \[EGrave] da sinistra a destra, e 1 \
indica quanti caratteri della stringa di input vanno letti per capire la \
produzione successiva. Per essere LL(1) \[EGrave] necessario che la \
grammatica sia non ambigua, cio\[EGrave] che non abbia due produzioni che \
iniziano con lo stesso terminale, e sia non ricorsiva a sinistra, \
cio\[EGrave] il primo elemento di una produzione di un Non Terminale non sia \
il non Terminale stesso.

Nell\[CloseCurlyQuote]esempio precedente la grammatica \[EGrave] ambigua \
perch\[EGrave] le due produzioni di \[OpenCurlyDoubleQuote]A\
\[CloseCurlyDoubleQuote] iniziano entrambe per \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote]. 
Un esempio di grammatica ricorsiva a sinistra \[EGrave]:\
\>", "Text",
 CellChangeTimes->{{3.890751559350464*^9, 3.89075155965889*^9}, {
   3.893327592718688*^9, 3.8933275935005627`*^9}, {3.893333428048501*^9, 
   3.893333447056421*^9}, {3.893333487160675*^9, 3.8933334972640285`*^9}, {
   3.8933335337038317`*^9, 3.8933335587043533`*^9}, {3.893333617039134*^9, 
   3.893333657871892*^9}, {3.8933338069265614`*^9, 3.893334027109736*^9}, {
   3.8933340833981137`*^9, 3.8933340915662794`*^9}, {3.893334155837365*^9, 
   3.8933343963492537`*^9}, {3.8933345653484774`*^9, 
   3.8933346126911783`*^9}, {3.893334656835793*^9, 3.893334657531576*^9}, {
   3.893479095950389*^9, 3.893479096388605*^9}, 
   3.8934791411222944`*^9},ExpressionUUID->"8035951f-3f95-47fc-ac68-\
058de01754a0"],

Cell[BoxData[
 RowBox[{"\t\t", 
  RowBox[{"A", " ", "->", " ", 
   RowBox[{"Aa", " ", "|", " ", "\[Epsilon]"}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.893334623283156*^9, 
  3.8933346523252125`*^9}},ExpressionUUID->"39118365-7d5b-43e3-99e3-\
3a4a14fab024"],

Cell["\<\
che produce stringhe di soli caratteri \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote], ma leggendo solo un carattere alla volta \[EGrave] \
impossibile sapere quante volte \[EGrave] stata sviluppata la prima \
produzione (in particolare \[EGrave] necessario leggere tutta la stringa per \
sapere quante produzioni sono state fatte).

Un esempio di grammatica LL(1) \[EGrave]:\
\>", "Text",
 CellChangeTimes->{{3.893334660459532*^9, 
  3.893334827043247*^9}},ExpressionUUID->"aa978665-5369-4964-8987-\
c2ef01f4a074"],

Cell[BoxData[
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"A", " ", "->", " ", 
    RowBox[{"aA", " ", "|", " ", "B"}]}], "\[IndentingNewLine]", "\t\t", 
   RowBox[{"B", " ", "->", " ", 
    RowBox[{"bB", " ", "|", " ", "\[Epsilon]"}]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.8933348396716375`*^9, 3.8933348396756353`*^9}, {
  3.893334896786975*^9, 
  3.8933349224908867`*^9}},ExpressionUUID->"70d3cb79-035d-4602-a991-\
5bbac7d44173"],

Cell["\<\
che produce stringhe composte da una serie di \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote] seguite da una serie di \[OpenCurlyDoubleQuote]b\
\[CloseCurlyDoubleQuote] (si noti che le stringhe possono anche essere vuote).\
\>", "Text",
 CellChangeTimes->{{3.8933349515384064`*^9, 3.8933351182420597`*^9}, {
   3.8933354480879855`*^9, 3.893335509096744*^9}, 3.893335923638307*^9, {
   3.893479784925171*^9, 3.8934798897078805`*^9}, {3.893479947133542*^9, 
   3.8934799738840327`*^9}, {3.8934800354285936`*^9, 
   3.8934800360223246`*^9}},ExpressionUUID->"c9a3dd01-cb85-4389-b684-\
97695488f56f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["1.3 Parsing", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
  3.8907516134669905`*^9, 3.890751614743664*^9}, {3.89332776116625*^9, 
  3.8933277737984614`*^9}, {3.893336046406447*^9, 3.8933360465743847`*^9}, {
  3.893478542856886*^9, 
  3.893478542966168*^9}},ExpressionUUID->"73ab1766-7a53-4bec-9f86-\
2a2fc07d233a"],

Cell["\<\
Il parsing \[EGrave] il processo che prende una stringa del linguaggio in \
input e determina le produzioni della grammatica che la generano. In \
particolare, siamo interessati al parsing con grammatiche LL(1), con le quali \
\[EGrave] possibile trovare la produzione giusta leggendo in input un solo \
carattere alla volta. Ad esempio con la grammatica descritta prima:\
\>", "Text",
 CellChangeTimes->{{3.8933359484543543`*^9, 3.8933359859586167`*^9}, {
  3.8933360210710645`*^9, 3.8933361784614024`*^9}, {3.8934794083891554`*^9, 
  3.8934795295637093`*^9}},ExpressionUUID->"014820bb-6df9-460d-9b5a-\
895efe595162"],

Cell[BoxData[
 RowBox[{"\t\t", 
  RowBox[{
   RowBox[{"A", " ", "->", " ", 
    RowBox[{"aA", " ", "|", " ", "B"}]}], "\[IndentingNewLine]", "\t\t", 
   RowBox[{"B", " ", "->", " ", 
    RowBox[{"bB", " ", "|", " ", "\[Epsilon]"}]}]}]}]], "DisplayFormula",
 CellChangeTimes->{{3.8933378759253473`*^9, 
  3.8933378822282453`*^9}},ExpressionUUID->"b26faa46-5045-4df5-9970-\
7e09dcd51d36"],

Cell[TextData[{
 "\[EGrave] possibile capire come \[EGrave] stata prodotta la stringa \
\[OpenCurlyDoubleQuote]aabb\[CloseCurlyDoubleQuote] leggendo un solo \
carattere alla volta e sviluppando le produzioni da sinistra (quando un \
carattere viene prodotto \[EGrave] \[OpenCurlyDoubleQuote]consumato\
\[CloseCurlyDoubleQuote] dalla stringa):\n\n\t",
 Cell[BoxData[GridBox[{
    {
     RowBox[{
      StyleBox["stringa",
       FontWeight->"Bold"], ":", "    "}], 
     RowBox[{
      StyleBox["input",
       FontWeight->"Bold"], ":", " "}], 
     RowBox[{"  ", 
      RowBox[{
       StyleBox["produzione",
        FontWeight->"Bold"], ":"}]}]},
    {"aabb", "a", "A"},
    {"aabb", "a", "aA"},
    {"abb", "a", "aaA"},
    {"bb", "b", "aaB"},
    {"bb", "b", "aabB"},
    {"b", "b", "aabbB"},
    {"\[Epsilon]", "\[Epsilon]", "aabb"}
   }]], "DisplayFormula",
  CellChangeTimes->{{3.8933351324474907`*^9, 3.8933354691207275`*^9}, {
   3.8933355343480587`*^9, 3.893335775664409*^9}},ExpressionUUID->
  "38628610-e67d-4cdf-a873-e74a00ba7462"],
 "\n\nQuesto esempio \[EGrave] stato fatto in maniera intuitiva, ma con \
grammatiche pi\[UGrave] complesse non \[EGrave] sempre possibile. In questi \
casi, si deve applicare un procedimento per ottenere una tabella di parsing \
che associa ad ogni coppia di Non Terminale e Terminale una produzione da \
sviluppare. \n\nQuesta tabella ha due funzioni: \n\t- fornire le regole per \
il parsing delle stringhe;\n\t- verificare che la grammatica sia \
effettivamente LL(1). \n\t\nIn questo documento ci concentriamo solamente su \
grammatiche che sappiamo essere LL(1), che verranno prodotte nell\
\[CloseCurlyQuote]interfaccia finale di svolgimento degli esercizi. \n\nNelle \
prossime sezioni vengono illustrate le fasi di questo procedimento: la \
creazione degli insiemi Nullable, First e Follow per ogni Non Terminale e le \
regole di costruzione e riempimento della tabella di parsing finale."
}], "Text",
 CellChangeTimes->{{3.890751559350464*^9, 3.89075155965889*^9}, {
   3.893327592718688*^9, 3.8933275935005627`*^9}, {3.8933358839522123`*^9, 
   3.893335885882512*^9}, {3.8933361028544083`*^9, 3.8933361030465097`*^9}, 
   3.8933361892060947`*^9, {3.893336225302*^9, 3.8933362329417777`*^9}, {
   3.893337859664007*^9, 3.893337907887191*^9}, {3.893338000454883*^9, 
   3.8933380036706676`*^9}, {3.893338079742179*^9, 3.893338129678248*^9}, {
   3.893338219916582*^9, 3.893338495829579*^9}, 3.893479550181635*^9, {
   3.8934796042284822`*^9, 
   3.8934797034611197`*^9}},ExpressionUUID->"5d9d7106-8588-4618-8e0f-\
c9d98b41818f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["II. Nullable", "Section",
 CellChangeTimes->{{3.893227942043301*^9, 
  3.8932279640068965`*^9}},ExpressionUUID->"0646fb6f-37b6-4ed3-957d-\
29a0728cc53c"],

Cell[CellGroupData[{

Cell["2.1 Cos\[CloseCurlyQuote]\[EGrave] l\[CloseCurlyQuote]insieme \
Nullable", "Subsection",
 CellChangeTimes->{{3.890751485035192*^9, 3.890751504746661*^9}, {
  3.890751574160438*^9, 3.8907515750480895`*^9}, {3.8907516175610323`*^9, 
  3.890751619100312*^9}, {3.8932280044018545`*^9, 3.8932280124317875`*^9}, {
  3.89330115418227*^9, 
  3.8933011545933137`*^9}},ExpressionUUID->"fdf434a1-9f32-4214-b7fb-\
b421dfb429f1"],

Cell["\<\
Data una grammatica context-free, un simbolo non terminale viene definito \
\[OpenCurlyDoubleQuote]nullable\[CloseCurlyDoubleQuote] se questo pu\[OGrave] \
produrre una stringa vuota.
La stringa vuota \[EGrave] generalmente rappresentata dal simbolo \
\[OpenCurlyDoubleQuote]\[Epsilon]\[CloseCurlyDoubleQuote].

Dato un non terminale A, la funzione Nullable(A) ritorna True se A \[EGrave] \
nullable, False altrimenti.

L\[CloseCurlyQuote]insieme Nullable \[EGrave] costituito da tutti i simboli \
non terminali nullable di una grammatica.\
\>", "Text",
 CellChangeTimes->{{3.89075151167789*^9, 3.890751511958028*^9}, {
  3.8932303324220357`*^9, 3.8932303967248764`*^9}, {3.893231743840313*^9, 
  3.8932317903367043`*^9}, {3.8932318247066593`*^9, 3.8932319035388327`*^9}, {
  3.893232090766887*^9, 3.8932321035986032`*^9}, {3.893232146485094*^9, 
  3.8932321862000294`*^9}, {3.8932322474597025`*^9, 3.8932323867838683`*^9}, {
  3.8932324239391303`*^9, 3.8932325592874613`*^9}, {3.8932367889397817`*^9, 
  3.893236789436038*^9}},ExpressionUUID->"69ad39df-ffb3-451b-9784-\
d3cfc8adfd86"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.2 Come si genera", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
  3.8907516225991993`*^9, 3.8907516234660063`*^9}, {3.8932280157467365`*^9, 
  3.893228017946612*^9}, {3.8933011575218453`*^9, 
  3.893301157737505*^9}},ExpressionUUID->"0bf6c4da-1221-4b0a-969c-\
c598692c2e8e"],

Cell[TextData[{
 "Il primo passo \[EGrave] individuare tutte le produzioni in cui compare \
\[Epsilon].\nI simboli non terminali che producono \[Epsilon] fanno parte \
dell\[CloseCurlyQuote]insieme nullable.\nTuttavia, questi non sono gli unici \
simboli non terminali che possono fare parte di questo insieme.\nIl passo \
successivo \[EGrave] individuare, se esistono, le produzioni in cui compaiono \
unicamente uno o pi\[UGrave] simboli non terminali gi\[AGrave] presenti nell\
\[CloseCurlyQuote]insieme Nullable. Anche queste produzioni possono risultare \
in stringhe vuote, di conseguenza, i non terminali che le generano devono \
essere aggiunti all\[CloseCurlyQuote]insieme Nullable.  \nSi ripete questo \
passaggio finch\[EGrave] sono state analizzate tutte le produzioni.\n\nNel \
caso in cui \[Epsilon]",
 StyleBox[" ",
  FontWeight->"Bold"],
 "non compaia in nessuna produzione, l\[CloseCurlyQuote]insieme Nullable sar\
\[AGrave] vuoto e nessun simbolo non terminale sar\[AGrave] definito nullable."
}], "Text",
 CellChangeTimes->{{3.890751559350464*^9, 3.89075155965889*^9}, {
   3.8932325662090416`*^9, 3.8932326654071846`*^9}, {3.893232773070665*^9, 
   3.893233038444023*^9}, {3.8932330796920195`*^9, 3.893233158298833*^9}, {
   3.8932332075263925`*^9, 3.893233255443423*^9}, 
   3.893233288961516*^9},ExpressionUUID->"957dcab2-83cb-44a3-801e-\
0bef065d6273"]
}, Open  ]],

Cell[CellGroupData[{

Cell["2.3 Esempi", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
  3.8907516225991993`*^9, 3.8907516234660063`*^9}, {3.8932280157467365`*^9, 
  3.8932280296591315`*^9}, {3.893301159790677*^9, 
  3.8933011607996235`*^9}},ExpressionUUID->"890f2930-b3cd-4a49-8261-\
5a17ca97376b"],

Cell[TextData[{
 StyleBox["Esempio 2.1",
  FontWeight->"Bold"],
 "\n\n",
 "Data la seguente grammatica, trova l\[CloseCurlyQuote]insieme di non \
terminali nullable.\n\nA \[RightArrow] aB\nB \[RightArrow] b | C\nC \
\[RightArrow] \[Epsilon]",
 "\n\n1. Partiamo dall\[CloseCurlyQuote]insieme Nullable vuoto.\n\tNullable = \
{}\n2. Cerchiamo dove compare \[Epsilon]. C genera \[Epsilon], perci\[OGrave] \
C \[EGrave] nullable.\n\tNullable = {C}\n3. Cerchiamo le produzioni in cui \
compare unicamente C. B genera C, perci\[OGrave] B \[EGrave] nullable.\n\t\
Nullable = {C, B}\n\t\nNota\.b9: B pu\[OGrave] produrre anche il terminale b. \
Questo non influenza il fatto che B sia nullable o meno fintanto che B ha \
almeno una produzione nullable.\nNota\.b2: B \[EGrave] presente nella \
produzione di A, ma \[EGrave] preceduto da un simbolo terminale, perci\
\[OGrave] A non potr\[AGrave] mai essere nullable perch\[EGrave] le sue \
produzioni dovranno sempre contenere il simbolo \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.890751559350464*^9, 3.89075155965889*^9}, {
  3.8932332980587025`*^9, 3.8932335945832825`*^9}, {3.893233624726618*^9, 
  3.8932337431802726`*^9}, {3.8932337922198124`*^9, 3.8932338352191424`*^9}, {
  3.8932338866028023`*^9, 3.893233927720526*^9}, {3.893236816469597*^9, 
  3.8932368439200273`*^9}, {3.8932369548618107`*^9, 3.893237016144601*^9}, {
  3.8932375812910275`*^9, 3.8932376520963326`*^9}, {3.8932377579657917`*^9, 
  3.8932377587843037`*^9}},ExpressionUUID->"bcd51cd4-9be4-41fe-b942-\
57f9f01a9f4f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["III. First", "Section",
 CellChangeTimes->{{3.8932279720301743`*^9, 
  3.8932279737402077`*^9}},ExpressionUUID->"b775610c-d517-4bd7-870f-\
1f6c36027a95"],

Cell[CellGroupData[{

Cell["3.1 Cos\[CloseCurlyQuote]\[EGrave] l\[CloseCurlyQuote]insieme First", \
"Subsection",
 CellChangeTimes->{{3.890751485035192*^9, 3.890751504746661*^9}, {
  3.890751574160438*^9, 3.8907515750480895`*^9}, {3.8907516175610323`*^9, 
  3.890751619100312*^9}, {3.8932280044018545`*^9, 3.8932280124317875`*^9}, {
  3.893228046742806*^9, 3.8932280561441445`*^9}, {3.893301163954321*^9, 
  3.8933011644009075`*^9}},ExpressionUUID->"e59a435c-60ac-4a6e-a5c7-\
e9b47ccff390"],

Cell["\<\
Data una grammatica context-free, a ogni simbolo non terminale \[EGrave] \
associato un insieme First. Questo insieme \[EGrave] composto dai simboli \
terminali (compreso \[Epsilon]) che possono apparire come carattere iniziale \
di una stringa derivata da una produzione del non terminale. 

Nella progettazione dei compilatori, gli insiemi First e Follow vengono usati \
per aiutare a generare un parser predittivo per una data grammatica.
Infatti, se il compilatore sa qual \[EGrave] il primo carattere di una \
stringa prodotta quando viene applicata una certa regola e lo confronta con \
il primo carattere (o token) della stringa corrente in input, \[EGrave] \
capace di scegliere pi\[UGrave] facilmente quale regola applicare. \
\>", "Text",
 CellChangeTimes->{{3.89075151167789*^9, 3.890751511958028*^9}, {
   3.893237033597542*^9, 3.893237034098218*^9}, {3.8932370914496813`*^9, 
   3.8932370921412635`*^9}, {3.8932985239626904`*^9, 
   3.8932985451295166`*^9}, {3.89329860472062*^9, 3.8932986169854717`*^9}, {
   3.8932986541020465`*^9, 3.893298682775036*^9}, {3.893299144117691*^9, 
   3.893299144540183*^9}, 3.893301494223404*^9, {3.893433270205576*^9, 
   3.8934332861760225`*^9}, {3.893433316508916*^9, 3.8934333733747835`*^9}, {
   3.8934335315412903`*^9, 3.893433565058713*^9}, {3.893433615641449*^9, 
   3.893433636303338*^9}, {3.893433677194917*^9, 3.893433685842067*^9}, {
   3.8934337334021635`*^9, 3.893433873321415*^9}, 
   3.8934339072593718`*^9},ExpressionUUID->"5432960b-69a3-4ff1-b477-\
24c6de744c30"]
}, Open  ]],

Cell[CellGroupData[{

Cell["3.2 Come si genera", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
   3.8907516225991993`*^9, 3.8907516234660063`*^9}, {3.8932280157467365`*^9, 
   3.893228017946612*^9}, 3.893228057977214*^9, {3.8933011666955266`*^9, 
   3.893301167016553*^9}},ExpressionUUID->"46fa9c89-32bd-4862-8ff1-\
2f9fe1f19c32"],

Cell["\<\
L\[CloseCurlyQuote]odine in cui si cercano gli insiemi First di ogni non \
terminale \[EGrave] ininfluente, tuttavia, \[EGrave] pi\[UGrave] intuitivo \
partire da i non terminali le cui produzioni iniziano con un simbolo \
terminale. 

Dato quindi il non terminale che si sta analizzando, si aggiungono al suo \
insieme First i simboli terminali che sono al primo posto nelle sue produzioni.
Se una delle sue produzioni inizia con un altro simbolo non terminale, all\
\[CloseCurlyQuote]insieme si aggiungeranno i first di \
quest\[CloseCurlyQuote]altro non terminale (se non sono ancora stati \
calcolati rester\[AGrave] in sospeso e verr\[AGrave] completato una volta \
calcolati).
In pi\[UGrave], se la produzione ha come primo simbolo un simbolo non \
terminale nullable, all\[CloseCurlyQuote]insieme si aggiunger\[AGrave] anche \
l\[CloseCurlyQuote]elemento successivo nella produzione. Se questo \[EGrave] \
un terminale esso verr\[AGrave] semplicemente aggiunto \
all\[CloseCurlyQuote]insieme, se, invece, \[EGrave] un non terminale si \
ripete il passo precedente finch\[EAcute] non si incontra un terminale, un \
non terminale non nullable oppure la produzione finisce.
Si procede cos\[IGrave] finch\[EAcute] tutti gli insiemi First sono completi.

\[CapitalEGrave] importante sottolineare che \[Epsilon] non viene mai passato \
da un insieme First a un altro, ma viene aggiunto a presciendere all\
\[CloseCurlyQuote]insieme First di tutti i non terminali nullable.\
\>", "Text",
 CellChangeTimes->{{3.890751559350464*^9, 3.89075155965889*^9}, {
  3.893298948119566*^9, 3.8932989662772193`*^9}, {3.893299195816369*^9, 
  3.893299201148634*^9}, {3.893299238783553*^9, 3.893299567828743*^9}, {
  3.8932996334338007`*^9, 3.893299717096692*^9}, {3.8932998187006397`*^9, 
  3.893299831532713*^9}, {3.8932999548465176`*^9, 3.893300108937485*^9}, {
  3.8933001403997264`*^9, 3.893300224338467*^9}, {3.8933007615061255`*^9, 
  3.8933007645759864`*^9}, {3.8933007973599515`*^9, 3.8933008078555903`*^9}, {
  3.89330084862671*^9, 3.893300925605567*^9}, {3.893301630968874*^9, 
  3.893301631278927*^9}, {3.8933017516819425`*^9, 
  3.893301773707411*^9}},ExpressionUUID->"86f53269-f156-4951-9a9c-\
4ad530f4d153"]
}, Open  ]],

Cell[CellGroupData[{

Cell["3.3 Esempi", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
   3.8907516225991993`*^9, 3.8907516234660063`*^9}, {3.8932280157467365`*^9, 
   3.8932280296591315`*^9}, 3.893228060037543*^9, {3.8933011703540964`*^9, 
   3.893301170863864*^9}},ExpressionUUID->"c0435769-f0c6-4cbf-b20d-\
cbba7ad36a95"],

Cell[TextData[{
 StyleBox["Esempio 3.1",
  FontWeight->"Bold"],
 "\n\nData la seguente grammatica, trova l\[CloseCurlyQuote]insieme First per \
ogni non terminale.\n\nA \[RightArrow] aB\nB \[RightArrow] b | C\nC \
\[RightArrow] cd | De\nD \[RightArrow] f | \[Epsilon]\n\nNullable = {D}\n\n1. \
Partiamo dal non terminale A. Esso ha una sola produzione che inizia con il \
terminale \[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote], perci\[OGrave]:\n\
\tFirst(A) = {a}\n2. B ha due produzioni, una che inizia con \
\[OpenCurlyDoubleQuote]b\[CloseCurlyDoubleQuote] e una con C. Aggiungiamo b \
all\[CloseCurlyQuote]insieme e teniamo in sospeso i first di C.\n\tFirst(B) = \
{b, First(C)}\n3. C ha due produzioni, una che inizia con \
\[OpenCurlyDoubleQuote]c\[CloseCurlyDoubleQuote] e una con D. Essendo D \
nullable guardiamo cosa appare dopo nella produzione. Dopo D appare \
\[OpenCurlyDoubleQuote]e\[CloseCurlyDoubleQuote], perci\[OGrave] avremo:\n\t\
First(C) = {c, First(D), e}\n4. D ha due produzioni (ed \[EGrave] nullable).\n\
\tFirst(D) = {f, \[Epsilon]}\n5. Ora, completiamo gli insiemi che avevamo \
lasciato in sospeso.\n\tFirst(C) = {c, f, e}\n\tFirst(B) = {b, c, f, e}"
}], "Text",
 CellChangeTimes->{{3.890751559350464*^9, 3.89075155965889*^9}, {
  3.8932377475798893`*^9, 3.893237863680147*^9}, {3.893300234243541*^9, 
  3.893300748780449*^9}, {3.8933027716464324`*^9, 
  3.8933027787057095`*^9}},ExpressionUUID->"2d2db8be-b1d3-434e-b2b6-\
5f0c3638bd78"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["IV. Follow", "Section",
 CellChangeTimes->{{3.893227982409775*^9, 
  3.8932279847584057`*^9}},ExpressionUUID->"4cc23520-cbfd-4a13-87ee-\
e5eded1b04bd"],

Cell[CellGroupData[{

Cell["4.1 Cos\[CloseCurlyQuote]\[EGrave] l\[CloseCurlyQuote]insieme Follow", \
"Subsection",
 CellChangeTimes->{{3.890751485035192*^9, 3.890751504746661*^9}, {
  3.890751574160438*^9, 3.8907515750480895`*^9}, {3.8907516175610323`*^9, 
  3.890751619100312*^9}, {3.8932280044018545`*^9, 3.8932280626652966`*^9}, {
  3.893304011189829*^9, 
  3.8933040121572313`*^9}},ExpressionUUID->"e722abd7-c646-4038-b81d-\
a9f41e2cd661"],

Cell["\<\
Data una grammatica context-free, a ogni simbolo non terminale \[EGrave] \
associato un insieme Follow. Questo insieme \[EGrave] composto dai simboli \
terminali (e dal simbolo $) che possono apparire immediatamente dopo il non \
terminale in qualsiasi derivazione valida.

Anche l\[CloseCurlyQuote]insieme Follow ha lo scopo di aiutare il compilatore \
a capire quale produzione scegliere dopo aver letto il carattere successivo \
in input. \
\>", "Text",
 CellChangeTimes->{{3.89075151167789*^9, 3.890751511958028*^9}, {
  3.893301455150965*^9, 3.89330150132437*^9}, {3.8934339983248215`*^9, 
  3.8934340012179165`*^9}, {3.893434552670235*^9, 3.893434607227141*^9}, {
  3.8934346781708803`*^9, 
  3.8934346812532606`*^9}},ExpressionUUID->"ef855798-cad4-4986-ab62-\
63ba9c256773"]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.2 Come si genera", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
  3.8907516225991993`*^9, 3.8907516234660063`*^9}, {3.8932280157467365`*^9, 
  3.893228017946612*^9}, {3.893228065200433*^9, 3.8932280658423862`*^9}, {
  3.893304008584242*^9, 
  3.8933040093032165`*^9}},ExpressionUUID->"e7ccc2a3-87a4-40d1-b1f4-\
391cf4060341"],

Cell["\<\
L\[CloseCurlyQuote]odine in cui si cercano gli insiemi Follow di ogni non \
terminale \[EGrave] ininfluente.

Dato il non terminale, il primo passo \[EGrave] individuare le produzioni in \
cui esso compare. 
Successivamente, per ogni produzione, si cerca qual \[EGrave] l\
\[CloseCurlyQuote]elemento immediatamente a destra del non terminale. Questo \
pu\[OGrave] essere un terminale, un non terminale o pu\[OGrave] non esserci \
niente.
Se \[EGrave] un terminale questo viene aggiunto all\[CloseCurlyQuote]insieme \
Follow.
Se \[EGrave] un non terminale si aggiungono all\[CloseCurlyQuote]insieme i \
first di quel non terminale. Se il non terminale \[EGrave] nullable, si deve \
vedere anche l\[CloseCurlyQuote]elemento successivo nella produzione \
(ripetendo questi passi finch\[EAcute] non si trova qualcosa che non sia un \
non terminale nullable).
Se dopo il terminale la produzione finisce si aggiungono \
all\[CloseCurlyQuote]insieme Follow i follow del non terminale che ha \
generato quella produzione (se questi non sono stati ancora calcolati si \
tiene in sospeso e si completer\[AGrave] in seguito).

Il simbolo $ viene dato di default all\[CloseCurlyQuote]insieme Follow del \
non terminale iniziale e pu\[OGrave] essere passato da un insieme Follow a un \
altro.
Il simbolo \[Epsilon], invece, non compare mai in nessun insieme Follow.\
\>", "Text",
 CellChangeTimes->{{3.890751559350464*^9, 3.89075155965889*^9}, {
  3.893301575744068*^9, 3.893301582290613*^9}, {3.893301628013404*^9, 
  3.893301628356537*^9}, {3.893301734843968*^9, 3.8933017382879705`*^9}, {
  3.89330179461082*^9, 3.893301853599239*^9}, {3.893301932539561*^9, 
  3.893302031334327*^9}, {3.893302127709382*^9, 3.8933022340609493`*^9}, {
  3.8933022733934393`*^9, 3.8933023202673173`*^9}, {3.8933025326207366`*^9, 
  3.8933026984025283`*^9}, {3.8933029733819933`*^9, 
  3.8933030260474286`*^9}},ExpressionUUID->"4a39c3d8-0e4f-4355-872a-\
f8ff9dd5054c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["4.3 Esempi", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
  3.8907516225991993`*^9, 3.8907516234660063`*^9}, {3.8932280157467365`*^9, 
  3.8932280296591315`*^9}, {3.8932280680874567`*^9, 3.8932280684275827`*^9}, {
  3.893304003977454*^9, 
  3.8933040063118052`*^9}},ExpressionUUID->"40f29717-1677-4d9f-96fe-\
4b0a0b81e7ab"],

Cell[TextData[{
 StyleBox["Esempio 4.1\n\n",
  FontWeight->"Bold"],
 "Data la seguente grammatica, trova l\[CloseCurlyQuote]insieme Follow per \
ogni non terminale.\n\nA \[RightArrow] aB\nB \[RightArrow] b | CDc\nC \
\[RightArrow] d | De\nD \[RightArrow] f | \[Epsilon]\n\nNullable = {D}\n\
First(A) = {a}\nFirst(B) = {b, d, f}\nFirst(C) = {d, f}\nFirst(D) = {f, \
\[Epsilon]}\n\n1. Partiamo dal non terminale A. Esso \[EGrave] il non \
terminale iniziale e non compare in nessuna produzione, perci\[OGrave]:\n\t\
Follow(A) = {$}\n2. B compare solo nella produzione di A e non ha niente alla \
sua destra, di conseguenza aggiungiamo ai suoi follow i follow di A.\n\t\
Follow(B) = {$}\n3. C compare nella seconda produzione di B. \[CapitalEGrave] \
seguito dal non terminale nullable D. I suoi follow saranno quindi i first di \
D e \[OpenCurlyDoubleQuote]c\[CloseCurlyDoubleQuote].\n\tFollow(C) = {f, c}\n\
4. D compare in due produzioni.\n\tFollow(D) = {c, e}\n\nNota\.b9: per come \
\[EGrave] stato progettato il pacchetto il non terminale iniziale non compare \
mai nelle produzioni, ma questo non \[EGrave] sempre il caso nelle \
grammatiche reali."
}], "Text",
 CellChangeTimes->{{3.890751559350464*^9, 3.89075155965889*^9}, {
  3.893301859933814*^9, 3.893301886974596*^9}, {3.8933027127762165`*^9, 
  3.893302713094245*^9}, {3.8933028140179863`*^9, 3.8933029441857076`*^9}, {
  3.893303035101274*^9, 3.893303092940839*^9}, {3.8933032874486065`*^9, 
  3.893303297069931*^9}, {3.8933033885510206`*^9, 3.893303389162572*^9}, {
  3.8933034453946195`*^9, 3.8933034746381955`*^9}, {3.8933035227301054`*^9, 
  3.893303534783592*^9}, {3.893303587814824*^9, 3.8933036950471277`*^9}, {
  3.8933037427641597`*^9, 
  3.8933038896840315`*^9}},ExpressionUUID->"004136ee-b984-48d9-b4c0-\
82c7bb846a9d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["V. Tabella di parsing", "Section",
 CellChangeTimes->{{3.890751417445614*^9, 3.8907514209663477`*^9}, {
  3.893496079127454*^9, 
  3.8934960848458652`*^9}},ExpressionUUID->"8128f560-56af-4906-b20e-\
f0eb5cee469c"],

Cell[CellGroupData[{

Cell["5.1 Cos\[CloseCurlyQuote]\[EGrave] la tabella di parsing", "Subsection",
 CellChangeTimes->{{3.890751485035192*^9, 3.890751504746661*^9}, {
  3.890751574160438*^9, 3.8907515750480895`*^9}, {3.890751625603489*^9, 
  3.89075162995789*^9}, {3.893496088136718*^9, 
  3.8934960982925572`*^9}},ExpressionUUID->"61129019-4c6b-42e5-ba5e-\
736ca23b4903"],

Cell["\<\
La tabella di parsing \[EGrave] una tabella a doppia entrata in cui nelle \
colonne si hanno tutti i simboli terminali (compreso $) della grammatica e \
nelle righe tutti i simboli non terminali.
Viene utilizzata per parsare una stringa in input e generare l\
\[CloseCurlyQuote]albero sintattico.
Il parser fa riferimento a questa tabella per prendere \
sull\[CloseCurlyQuote]input e sulla produzione che lo genera.

L\[CloseCurlyQuote]ordine in cui compaiono i non terminali e i terminali \
nelle righe e nelle colonne \[EGrave] ininfluente.\
\>", "Text",
 CellChangeTimes->{{3.89075151167789*^9, 3.890751511958028*^9}, {
  3.893496486082*^9, 3.8934964952599974`*^9}, {3.8934970401735535`*^9, 
  3.8934970411751947`*^9}, {3.893497184897534*^9, 3.89349722496244*^9}, {
  3.8934974938464403`*^9, 3.893497615037817*^9}, {3.893502436769637*^9, 
  3.8935024653558674`*^9}, {3.89350288360027*^9, 3.8935028871177573`*^9}, {
  3.893502992823063*^9, 
  3.8935031312451963`*^9}},ExpressionUUID->"ea103078-fabb-4a01-8320-\
03e9c65139dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["5.2 Come si completa", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
  3.890751632906438*^9, 3.8907516341592317`*^9}, {3.8934961002602444`*^9, 
  3.893496130354065*^9}, {3.8935016893747177`*^9, 
  3.8935016904899645`*^9}},ExpressionUUID->"fa22868b-75e1-427f-a7c3-\
158c9ffb1128"],

Cell["\<\
Il completamento della tabella prevede di inserire ogni produzione nella \
cella corretta.
Le produzioni di un dato non terminale andranno sempre nella riga assegnata a \
quel non terminale. 

Le prime produzioni da valutare sono quelle che iniziano con un simbolo \
terminale. Esse andranno inserite nella colonna del simbolo iniziale della \
produzione.
Successivamente, si analizzano le produzioni che iniziano con un simbolo non \
terminale. La produzione sar\[AGrave] inserita nelle colonne dei simboli \
terminali che fanno parte dell\[CloseCurlyQuote]inisieme First del non \
terminale che appare come simbolo iniziale.
Infine, si prendono in considerazione le produzioni che generano \[Epsilon]. \
Queste andranno messe nelle colonne dei simboli terminali che fanno parte \
dell\[CloseCurlyQuote]insieme Follow del non terminale che ha generato la \
produzione.\
\>", "Text",
 CellChangeTimes->{{3.890751559350464*^9, 3.89075155965889*^9}, {
   3.893226931067625*^9, 3.893226932667945*^9}, 3.893496153732321*^9, {
   3.8934961895609074`*^9, 3.893496194848631*^9}, {3.893501685590431*^9, 
   3.893501686502264*^9}, {3.893501790753791*^9, 3.8935018601381593`*^9}, {
   3.893502219299659*^9, 3.893502270854417*^9}, {3.893502380078866*^9, 
   3.893502431719941*^9}, {3.8935024811630383`*^9, 
   3.89350272914106*^9}},ExpressionUUID->"9f5568fa-f41f-4c2a-8683-\
9cd3fe560f1c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["5.3 Esempi", "Subsection",
 CellChangeTimes->{{3.890751536580962*^9, 3.8907515375221353`*^9}, {
  3.890751632906438*^9, 3.8907516341592317`*^9}, {3.8934961002602444`*^9, 
  3.893496156932616*^9}},ExpressionUUID->"641097da-573a-409d-a974-\
74e1676aee23"],

Cell[TextData[{
 StyleBox["Esempio 5.1\n\n",
  FontWeight->"Bold"],
 "Data la seguente grammatica, completa la tabella di parsing.\n\nA \
\[RightArrow] BC | aDb\nB \[RightArrow] cd | \[Epsilon]\nC \[RightArrow] e | \
\[Epsilon]\nD \[RightArrow] fg\n\nNullable = {B, C}\n\nFirst(A) = {a, }\n\
First(B) = {c, \[Epsilon]}\nFirst(C) = {e, \[Epsilon]}\nFirst(D) = {f}\n\n\
Follow(A) = {$}\nFollow(B) = {e}\nFollow(C) = {$}\nFollow(D) = {b}\n\n1. \
Partiamo dalla tabella vuota.\n"
}], "Text",
 CellChangeTimes->{{3.893496159962809*^9, 3.893496169502224*^9}, {
  3.8935027465488763`*^9, 3.893502750844793*^9}, {3.8935027945914297`*^9, 
  3.8935028070998063`*^9}, {3.8935032071221466`*^9, 3.893503424346247*^9}, {
  3.8935034732579823`*^9, 3.8935034802629213`*^9}, {3.893503707211544*^9, 
  3.893503712441511*^9}},ExpressionUUID->"386cf907-739f-48b3-9a68-\
1a2fd12fd54a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\< \>\"", ",", "a", ",", "b", ",", " ", "c", ",", " ", "d", ",", " ",
        "e", ",", " ", "f", ",", " ", "g", ",", " ", "$"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "A", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "B", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "C", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "D", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "->", "All"}], ",", " ", 
   RowBox[{"ItemSize", " ", "->", " ", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.893503483881663*^9, 3.8935035480817657`*^9}, {
  3.8935035807356977`*^9, 3.8935036018766613`*^9}, {3.893503653777929*^9, 
  3.8935036756870265`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"667eb9bc-adbe-4b7c-9e07-a4d13843158b"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\" \"\>", "a", "b", "c", "d", "e", "f", "g", "$"},
    {"A", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"B", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"C", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"D", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\" \"\>", "\<\" \"\>", "\<\" \"\>"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{10}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.8935036038877416`*^9, {3.893503660005397*^9, 3.8935036781565948`*^9}},
 CellLabel->"Out[25]=",ExpressionUUID->"346a669d-f7cf-4741-9ad8-64b544b182d2"]
}, {2}]],

Cell["\<\
2. Iniziamo dalla produzione A \[RightArrow] aDb. Inizia con \
\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] perci\[OGrave] verr\[AGrave] \
messa nella riga A e colonna a.
\
\>", "Text",
 CellChangeTimes->{{3.8935036908010426`*^9, 
  3.8935037397680116`*^9}},ExpressionUUID->"6f05de30-7087-4357-9e3b-\
c38102986959"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\< \>\"", ",", "a", ",", "b", ",", " ", "c", ",", " ", "d", ",", " ",
        "e", ",", " ", "f", ",", " ", "g", ",", " ", "$"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "A", ",", "\"\<A \[RightArrow] aDb\>\"", ",", "\"\< \>\"", ",", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
      "B", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "C", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "D", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "->", "All"}], ",", " ", 
   RowBox[{"ItemSize", " ", "->", " ", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.893503483881663*^9, 3.8935035480817657`*^9}, {
  3.8935035807356977`*^9, 3.8935036018766613`*^9}, {3.893503653777929*^9, 
  3.8935036756870265`*^9}, {3.8935037557301054`*^9, 3.8935037559521866`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"eb458662-eedc-4b49-ae2f-c592e586e351"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\" \"\>", "a", "b", "c", "d", "e", "f", "g", "$"},
    {"A", "\<\"A \[RightArrow] aDb\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \
\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"B", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"C", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"D", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\" \"\>", "\<\" \"\>", "\<\" \"\>"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{10}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.8935036038877416`*^9, {3.893503660005397*^9, 3.8935036781565948`*^9}, 
   3.893503758244055*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"36be9489-537b-4ba2-b2a0-4eb93f92a341"]
}, {2}]],

Cell["\<\
3. Allo stesso modo, inseriamo le produzioni B \[RightArrow] cd, C \
\[RightArrow] e e D \[RightArrow] fg.
\
\>", "Text",
 CellChangeTimes->{{3.8935036908010426`*^9, 
  3.8935038150224113`*^9}},ExpressionUUID->"348b998a-3fb5-4ba7-bc04-\
71849f5e1436"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\< \>\"", ",", "a", ",", "b", ",", " ", "c", ",", " ", "d", ",", " ",
        "e", ",", " ", "f", ",", " ", "g", ",", " ", "$"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "A", ",", "\"\<A \[RightArrow] aDb\>\"", ",", "\"\< \>\"", ",", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
      "B", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", 
       "\"\<B \[RightArrow] cd\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "C", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\<C \[RightArrow] e\>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
      "D", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\<D \[RightArrow] fg\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\""}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "->", "All"}], ",", " ", 
   RowBox[{"ItemSize", " ", "->", " ", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.893503483881663*^9, 3.8935035480817657`*^9}, {
  3.8935035807356977`*^9, 3.8935036018766613`*^9}, {3.893503653777929*^9, 
  3.8935036756870265`*^9}, {3.8935037557301054`*^9, 3.8935037559521866`*^9}, {
  3.8935038343491297`*^9, 3.893503859048009*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"5cd0d65d-427e-4df3-bc7c-f3b8cf852b51"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\" \"\>", "a", "b", "c", "d", "e", "f", "g", "$"},
    {"A", "\<\"A \[RightArrow] aDb\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \
\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"B", "\<\" \"\>", "\<\" \"\>", "\<\"B \[RightArrow] cd\"\>", "\<\" \
\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"C", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\"C \
\[RightArrow] e\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"D", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\"D \[RightArrow] fg\"\>", "\<\" \"\>", "\<\" \"\>"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{10}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.8935036038877416`*^9, {3.893503660005397*^9, 3.8935036781565948`*^9}, 
   3.893503758244055*^9, 3.8935038620227757`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"b624e5fa-5459-4987-9ae7-634d88709c86"]
}, {2}]],

Cell["\<\
4. Analizziamo ora la produzione A \[RightArrow] BC. Inizia con il non \
terminale B, i cui First sono \
\[OpenCurlyDoubleQuote]c\[CloseCurlyDoubleQuote] e \[OpenCurlyDoubleQuote]\
\[Epsilon]\[CloseCurlyDoubleQuote]. Perci\[OGrave], inseriamo la produzione \
nella colonna c. 
\
\>", "Text",
 CellChangeTimes->{{3.8935036908010426`*^9, 3.8935038150224113`*^9}, {
  3.8935038720232644`*^9, 3.8935039450021315`*^9}, {3.893504027150428*^9, 
  3.893504031624064*^9}},ExpressionUUID->"8a1a9d3f-b1e9-4792-8a1c-\
33056bd7db1f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\< \>\"", ",", "a", ",", "b", ",", " ", "c", ",", " ", "d", ",", " ",
        "e", ",", " ", "f", ",", " ", "g", ",", " ", "$"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "A", ",", "\"\<A \[RightArrow] aDb\>\"", ",", "\"\< \>\"", ",", 
       "\"\<A \[RightArrow] BC\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "B", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", 
       "\"\<B \[RightArrow] cd\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "C", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\<C \[RightArrow] e\>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
      "D", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\<D \[RightArrow] fg\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\""}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "->", "All"}], ",", " ", 
   RowBox[{"ItemSize", " ", "->", " ", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.893503483881663*^9, 3.8935035480817657`*^9}, {
  3.8935035807356977`*^9, 3.8935036018766613`*^9}, {3.893503653777929*^9, 
  3.8935036756870265`*^9}, {3.8935037557301054`*^9, 3.8935037559521866`*^9}, {
  3.8935038343491297`*^9, 3.893503859048009*^9}, {3.8935039549464264`*^9, 
  3.893503955314777*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"578d7f46-198d-4d4d-91fb-48c4e7202d69"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\" \"\>", "a", "b", "c", "d", "e", "f", "g", "$"},
    {"A", "\<\"A \[RightArrow] aDb\"\>", "\<\" \"\>", "\<\"A \[RightArrow] BC\
\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"B", "\<\" \"\>", "\<\" \"\>", "\<\"B \[RightArrow] cd\"\>", "\<\" \
\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"C", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\"C \
\[RightArrow] e\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"D", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\"D \[RightArrow] fg\"\>", "\<\" \"\>", "\<\" \"\>"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{10}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.8935036038877416`*^9, {3.893503660005397*^9, 3.8935036781565948`*^9}, 
   3.893503758244055*^9, 3.8935038620227757`*^9, 3.8935039581165843`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"c31d2b4d-c5ed-439e-912c-546ab6528fb7"]
}, {2}]],

Cell["\<\
5. La produzione B \[RightArrow] \[Epsilon] andr\[AGrave], invece, inserita \
nelle colonne che corrispondono ai follow di B, ovvero \
\[OpenCurlyDoubleQuote]e\[CloseCurlyDoubleQuote].
\
\>", "Text",
 CellChangeTimes->{{3.8935036908010426`*^9, 3.8935038150224113`*^9}, {
  3.8935038720232644`*^9, 
  3.893504024489872*^9}},ExpressionUUID->"185bc883-8a01-4012-8428-\
eaaea821465d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\< \>\"", ",", "a", ",", "b", ",", " ", "c", ",", " ", "d", ",", " ",
        "e", ",", " ", "f", ",", " ", "g", ",", " ", "$"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "A", ",", "\"\<A \[RightArrow] aDb\>\"", ",", "\"\< \>\"", ",", 
       "\"\<A \[RightArrow] BC\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "B", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", 
       "\"\<B \[RightArrow] cd\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\<B \[RightArrow] \[Epsilon]\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "C", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\<C \[RightArrow] e\>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{
      "D", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\<D \[RightArrow] fg\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\""}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "->", "All"}], ",", " ", 
   RowBox[{"ItemSize", " ", "->", " ", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.893503483881663*^9, 3.8935035480817657`*^9}, {
  3.8935035807356977`*^9, 3.8935036018766613`*^9}, {3.893503653777929*^9, 
  3.8935036756870265`*^9}, {3.8935037557301054`*^9, 3.8935037559521866`*^9}, {
  3.8935038343491297`*^9, 3.893503859048009*^9}, {3.8935039549464264`*^9, 
  3.893503955314777*^9}, {3.8935040580084124`*^9, 3.893504058295519*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"e47078be-230e-4da9-a28c-810e3bc24e17"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\" \"\>", "a", "b", "c", "d", "e", "f", "g", "$"},
    {"A", "\<\"A \[RightArrow] aDb\"\>", "\<\" \"\>", "\<\"A \[RightArrow] BC\
\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"B", "\<\" \"\>", "\<\" \"\>", "\<\"B \[RightArrow] cd\"\>", "\<\" \
\"\>", "\<\"B \[RightArrow] \[Epsilon]\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \
\"\>"},
    {"C", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\"C \
\[RightArrow] e\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"D", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\"D \[RightArrow] fg\"\>", "\<\" \"\>", "\<\" \"\>"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{10}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.8935036038877416`*^9, {3.893503660005397*^9, 3.8935036781565948`*^9}, 
   3.893503758244055*^9, 3.8935038620227757`*^9, 3.8935039581165843`*^9, 
   3.8935040617920713`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"4c02b6bf-3784-44d4-b061-06372d90b1d0"]
}, {2}]],

Cell["\<\
6. Infine, la produzione C \[RightArrow] \[Epsilon] sar\[AGrave] inserita \
nelle colonne che corrispondono ai follow di C, ovvero \
\[OpenCurlyDoubleQuote]$\[CloseCurlyDoubleQuote].
\
\>", "Text",
 CellChangeTimes->{{3.8935036908010426`*^9, 3.8935038150224113`*^9}, {
  3.8935038720232644`*^9, 3.893504024489872*^9}, {3.8935040774471917`*^9, 
  3.8935041008578577`*^9}},ExpressionUUID->"c9e7994a-55b3-4556-a764-\
ff20210c1669"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\< \>\"", ",", "a", ",", "b", ",", " ", "c", ",", " ", "d", ",", " ",
        "e", ",", " ", "f", ",", " ", "g", ",", " ", "$"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "A", ",", "\"\<A \[RightArrow] aDb\>\"", ",", "\"\< \>\"", ",", 
       "\"\<A \[RightArrow] BC\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "B", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", 
       "\"\<B \[RightArrow] cd\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\<B \[RightArrow] \[Epsilon]\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "C", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\<C \[RightArrow] e\>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\<C \[RightArrow] \[Epsilon]\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "D", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", "\"\< \>\"", ",", " ", 
       "\"\< \>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\<D \[RightArrow] fg\>\"", ",", " ", "\"\< \>\"", ",", " ", 
       "\"\< \>\""}], "}"}]}], "}"}], ",", 
   RowBox[{"Frame", "->", "All"}], ",", " ", 
   RowBox[{"ItemSize", " ", "->", " ", "10"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.893503483881663*^9, 3.8935035480817657`*^9}, {
  3.8935035807356977`*^9, 3.8935036018766613`*^9}, {3.893503653777929*^9, 
  3.8935036756870265`*^9}, {3.8935037557301054`*^9, 3.8935037559521866`*^9}, {
  3.8935038343491297`*^9, 3.893503859048009*^9}, {3.8935039549464264`*^9, 
  3.893503955314777*^9}, {3.8935040580084124`*^9, 3.893504058295519*^9}, {
  3.8935041210739574`*^9, 3.8935041213243947`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"2780565f-16fb-4272-a9df-954ddad9201d"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\" \"\>", "a", "b", "c", "d", "e", "f", "g", "$"},
    {"A", "\<\"A \[RightArrow] aDb\"\>", "\<\" \"\>", "\<\"A \[RightArrow] BC\
\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>"},
    {"B", "\<\" \"\>", "\<\" \"\>", "\<\"B \[RightArrow] cd\"\>", "\<\" \
\"\>", "\<\"B \[RightArrow] \[Epsilon]\"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \
\"\>"},
    {"C", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\"C \
\[RightArrow] e\"\>", "\<\" \"\>", "\<\" \"\>", "\<\"C \[RightArrow] \
\[Epsilon]\"\>"},
    {"D", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", "\<\" \"\>", \
"\<\"D \[RightArrow] fg\"\>", "\<\" \"\>", "\<\" \"\>"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{10}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.8935036038877416`*^9, {3.893503660005397*^9, 3.8935036781565948`*^9}, 
   3.893503758244055*^9, 3.8935038620227757`*^9, 3.8935039581165843`*^9, 
   3.8935040617920713`*^9, 3.893504123431514*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"60406f44-cec8-4b78-b618-fcc2c7972924"]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["VII. Codice", "Section",
 CellChangeTimes->{{3.890751429118579*^9, 3.890751439177018*^9}, {
   3.8934347360433364`*^9, 3.893434737253439*^9}, 3.893584434969141*^9, {
   3.8935844895807133`*^9, 3.8935844985225487`*^9}, {3.8935845473229804`*^9, 
   3.8935845649257*^9}},ExpressionUUID->"eb32614a-c831-4e59-a181-\
6bf7143953e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Settiamo", " ", "il", " ", "Path", " ", "e", " ", "carichiamo", " ", 
    RowBox[{"pacchetto", ".", "m"}]}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"SetDirectory", "[", 
     RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}], "\n", 
   RowBox[{"<<", " ", "pacchetto.m"}], " ", "\n", "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"Main", " ", "per", " ", "generare", " ", "l"}], 
      "\[CloseCurlyQuote]"}], "interfaccia"}], "*)"}], "\n", 
   RowBox[{"GenerazioneEsercizio", "[", "12", "]"}], "\n"}]}]], "Input",
 CellChangeTimes->{{3.8907514723087015`*^9, 3.890751472587801*^9}, {
   3.893434113816236*^9, 3.893434114621792*^9}, {3.8934342403259935`*^9, 
   3.893434263045288*^9}, 3.893584444110671*^9, {3.8935845016398015`*^9, 
   3.893584536657407*^9}},
 CellLabel->
  "In[539]:=",ExpressionUUID->"bd6adc6e-3164-453c-8bb7-4b2b8673844a"],

Cell[BoxData[
 TemplateBox[{
  "Part", "partd", 
   "\"Part specification \\!\\(\\*RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"\\\\\
\\\"A\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"B\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"C\\\\\\\"\\\", \\\",\\\", \\\"\\\\\\\"D\\\\\\\"\\\"}], \
\\\"}\\\"}], \\\"\[LeftDoubleBracket]\\\", RowBox[{\\\"All\\\", \\\",\\\", \\\
\"1\\\"}], \\\"\[RightDoubleBracket]\\\"}]\\) is longer than depth of object.\
\"", 2, 541, 188, 27177400342324593241, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.893584602124843*^9},
 CellLabel->
  "During evaluation of \
In[539]:=",ExpressionUUID->"0112aa92-e574-45e8-b5a5-a208ec5e308e"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{AnalisiSintattica`Private`cursor$$ = 1, 
    AnalisiSintattica`Private`emptyCheckboxGrammar$$ = {{
     " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "$"}, {
     "A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", " ", " ", " ", 
      " ", " "}, {
     "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", " ", 
      " "}, {"C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", 
      " ", " ", " ", " "}, {
     "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", " ", 
      " "}}, AnalisiSintattica`Private`emptyGrammar$$ = {{
     " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "$"}, {
     "A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", " ", " ", " ", 
      " ", " "}, {
     "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", " ", 
      " "}, {"C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", 
      " ", " ", " ", " "}, {
     "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", " ", 
      " "}}, AnalisiSintattica`Private`showFirst$$ = True, 
    AnalisiSintattica`Private`showFollow$$ = True, 
    AnalisiSintattica`Private`showNullable$$ = False, 
    AnalisiSintattica`Private`showSolution$$ = True, 
    AnalisiSintattica`Private`soluzione$$ = {{
     " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "$"}, {
     "A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", " ", " ", " ", 
      " ", " "}, {
     "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", " ", 
      " "}, {"C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", 
      " ", " ", " ", " "}, {
     "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", " ", 
      " "}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[AnalisiSintattica`Private`soluzione$$]}, {{
       Hold[
       AnalisiSintattica`Private`emptyGrammar$$], {{
        " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", 
         "$"}, {"A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", " ", 
         " ", " ", " ", " "}, {
        "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", 
         " ", " "}, {
        "C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", " ", 
         " ", " ", " "}, {
        "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", " ", 
         " "}}}}, {{
       Hold[
       AnalisiSintattica`Private`emptyCheckboxGrammar$$], {{
        " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", 
         "$"}, {"A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", " ", 
         " ", " ", " ", " "}, {
        "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", 
         " ", " "}, {
        "C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", " ", 
         " ", " ", " "}, {
        "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", " ", 
         " "}}}}, {{
       Hold[AnalisiSintattica`Private`cursor$$], 0}}, {{
       Hold[AnalisiSintattica`Private`showNullable$$], False, 
       "Mostra Nullable"}, {True, False}}, {{
       Hold[AnalisiSintattica`Private`showFirst$$], False, "Mostra First"}, {
      True, False}}, {{
       Hold[AnalisiSintattica`Private`showFollow$$], False, 
       "Mostra Follow"}, {True, False}}, {{
       Hold[AnalisiSintattica`Private`showSolution$$], False, 
       "show solution"}, {True, False}}}, Typeset`size$$ = {
    603., {708.3138232632122, 712.3261767367879}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {
       AnalisiSintattica`Private`cursor$$ = 0, 
        AnalisiSintattica`Private`emptyCheckboxGrammar$$ = {{
          " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", 
           "$"}, {"A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", 
           " ", " ", " ", " ", " "}, {
          "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", 
           " ", " "}, {
          "C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", " ", 
           " ", " ", " "}, {
          "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", " ",
            " "}}, AnalisiSintattica`Private`emptyGrammar$$ = {{
          " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", 
           "$"}, {"A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", 
           " ", " ", " ", " ", " "}, {
          "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", 
           " ", " "}, {
          "C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", " ", 
           " ", " ", " "}, {
          "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", " ",
            " "}}, AnalisiSintattica`Private`showFirst$$ = False, 
        AnalisiSintattica`Private`showFollow$$ = False, 
        AnalisiSintattica`Private`showNullable$$ = False, 
        AnalisiSintattica`Private`showSolution$$ = False, 
        AnalisiSintattica`Private`soluzione$$ = Null}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Grid[{{
          Column[{
            Style["ANALISI SINTATTICA", Bold], 
            Style["ESERCIZIO DI GRAMMATICA N\[Degree]:", Bold], 
            Style[
            "Generare gli insiemi Nullable, First e Follow per la seguente \
grammatica", Bold]}, Alignment -> Left]}, {
          Column[{
            Row[{
              Button[
              "Nuova grammatica", (AnalisiSintattica`Private`cursor$$ = 0; 
               Spacer[5]; AnalisiSintattica`Private`showSolution$$ = False; 
               AnalisiSintattica`Private`emptyGrammar$$ = 
                AnalisiSintattica`Private`createEmptyGrammar[
                 AnalisiSintattica`Private`soluzione$$]; Null)& ], 
              DynamicModule[{AnalisiSintattica`Private`numero = ""}, 
               Panel[
                Column[{
                  Row[{
                    Style["Genera esercizio n\[Degree]: ", Bold], 
                    InputField[
                    Dynamic[AnalisiSintattica`Private`numero], Number]}], 
                  Dynamic[AnalisiSintattica`Private`numero]; Null}]]]}], " ", 
            Row[{
              Column[{
                Style["Grammatica", Bold], 
                Grid[
                 Map[List, AnalisiSintattica`Private`listaProduzioni], Frame -> 
                 All, Background -> {White, White}, ItemStyle -> {Automatic}, 
                 ItemSize -> {{8, {8}}}, BaseStyle -> {Bold}, Editable -> 
                 False]}, Alignment -> Left]}], " ", 
            Row[{
              Column[{
                Style["NULLABLE", Bold], 
                Framed[
                "Dato un non terminale, questo \[EGrave] nullable se pu\
\[OGrave] produrre una stringa vuota (\[Epsilon]).\nSeleziona i non terminali \
nullable.", FrameStyle -> Directive[Thin, White], ImageSize -> {800, 80}], 
                TabView[
                 Table[
                 Part[AnalisiSintattica`Private`tmp, 
                    AnalisiSintattica`Private`i] -> Checkbox[], {
                  AnalisiSintattica`Private`i, 1, 
                   Length[AnalisiSintattica`Private`tmp]}]]}, Alignment -> 
               Left], " ", 
              If[AnalisiSintattica`Private`showNullable$$, 
               Column[{
                 Style["Soluzione Nullable", Bold], 
                 TabView[
                  Table[
                  Part[AnalisiSintattica`Private`tmp, 
                    AnalisiSintattica`Private`i] -> 
                   Part[AnalisiSintattica`Private`nullable, 
                    AnalisiSintattica`Private`i, 2], {
                   AnalisiSintattica`Private`i, 1, 
                    Length[AnalisiSintattica`Private`tmp]}]]}, Alignment -> 
                Left], " "]}], " ", 
            Row[{
              Column[{
                Style["FIRST", Bold], 
                Framed[
                "Dato un non terminale (ad esempio A,B), il suo insieme First \
\[EGrave] composto dai simboli terminali (compreso \[Epsilon])\n che possono \
apparire come carattere iniziale di una stringa derivata da una sua \
produzione.", FrameStyle -> Directive[Thin, White], ImageSize -> {800, 80}], 
                AnalisiSintattica`Private`displayFirst[
                AnalisiSintattica`Private`emptyCheckboxGrammar$$]}, Alignment -> 
               Left], 
              If[AnalisiSintattica`Private`showFirst$$, 
               Column[{
                 Style["Soluzione First", Bold], 
                 AnalisiSintattica`Private`displayFirstSln[
                 AnalisiSintattica`Private`emptyCheckboxGrammar$$]}, 
                Alignment -> Left], ""]}], " ", 
            Row[{
              Column[{
                Style["FOLLOW", Bold], 
                Framed[
                "Dato un non terminale, il suo insieme Follow \[EGrave] \
composto dai simboli terminali (e dal simbolo $)\n che possono apparire \
immediatamente dopo il non terminale in qualsiasi derivazione valida.", 
                 FrameStyle -> Directive[Thin, White], 
                 ImageSize -> {600, 80}], 
                AnalisiSintattica`Private`displayFollow[
                AnalisiSintattica`Private`emptyCheckboxGrammar$$]}, Alignment -> 
               Left], 
              If[AnalisiSintattica`Private`showFollow$$, 
               Column[{
                 Style["Soluzione Follow", Bold], 
                 AnalisiSintattica`Private`displayFollowSln[
                 AnalisiSintattica`Private`emptyCheckboxGrammar$$]}, 
                Alignment -> Left], ""]}], " ", 
            Row[{
              Column[{
                Style["TABELLA PRODUZIONI", Bold], 
                Framed[
                "Seleziona la cella in cui inserire la produzione e \
successivamente il bottone ad essa corrispondente.", FrameStyle -> 
                 Directive[Thin, White]], 
                EventHandler[
                 Dynamic[
                  AnalisiSintattica`Private`displayTable[
                  AnalisiSintattica`Private`emptyGrammar$$, 
                   AnalisiSintattica`Private`cursor$$]], "MouseClicked" :> If[
                   Or[
                    MemberQ[
                    Range[
                    1, AnalisiSintattica`Private`rows 
                    AnalisiSintattica`Private`cols, 
                    AnalisiSintattica`Private`cols], 
                    AnalisiSintattica`Private`loc[
                    MousePosition["EventHandlerScaled"]]], 
                    MemberQ[
                    Range[1, AnalisiSintattica`Private`cols], 
                    AnalisiSintattica`Private`loc[
                    MousePosition["EventHandlerScaled"]]]], 
                   AnalisiSintattica`Private`cursor$$ = -1, 
                   AnalisiSintattica`Private`cursor$$ = 
                   AnalisiSintattica`Private`loc[
                    MousePosition["EventHandlerScaled"]]]], 
                Row[
                 Table[
                  
                  With[{AnalisiSintattica`Private`i$ = 
                    AnalisiSintattica`Private`i}, 
                   Button[
                    Part[
                    AnalisiSintattica`Private`listaProduzioni, 
                    AnalisiSintattica`Private`i$], 
                    Part[AnalisiSintattica`Private`emptyGrammar$$, 
                    Part[
                    AnalisiSintattica`Private`xy[
                    AnalisiSintattica`Private`cursor$$], 1], 
                    Part[
                    AnalisiSintattica`Private`xy[
                    AnalisiSintattica`Private`cursor$$], 2]] = 
                    Part[AnalisiSintattica`Private`listaProduzioni, 
                    AnalisiSintattica`Private`i$]; 
                    If[Part[AnalisiSintattica`Private`soluzione$$, 
                    Part[
                    AnalisiSintattica`Private`xy[
                    AnalisiSintattica`Private`cursor$$], 1], 
                    Part[
                    AnalisiSintattica`Private`xy[
                    AnalisiSintattica`Private`cursor$$], 2]] != 
                    Part[AnalisiSintattica`Private`emptyGrammar$$, 
                    Part[
                    AnalisiSintattica`Private`xy[
                    AnalisiSintattica`Private`cursor$$], 1], 
                    Part[
                    AnalisiSintattica`Private`xy[
                    AnalisiSintattica`Private`cursor$$], 2]], 
                    Beep[]]]], {AnalisiSintattica`Private`i, 1, 
                   Length[AnalisiSintattica`Private`listaProduzioni]}], 
                 Spacer[0.4]], 
                Row[{
                  Button[
                  "Clear", Part[AnalisiSintattica`Private`emptyGrammar$$, 
                    Part[
                    AnalisiSintattica`Private`xy[
                    AnalisiSintattica`Private`cursor$$], 1], 
                    Part[
                    AnalisiSintattica`Private`xy[
                    AnalisiSintattica`Private`cursor$$], 2]] = " "], 
                  Button["Clear All", 
                   Table[
                   Part[AnalisiSintattica`Private`emptyGrammar$$, 
                    AnalisiSintattica`Private`i, AnalisiSintattica`Private`j] = 
                    " ", {AnalisiSintattica`Private`i, 2, 
                    AnalisiSintattica`Private`rows}, {
                    AnalisiSintattica`Private`j, 2, 
                    AnalisiSintattica`Private`cols}]]}, Alignment -> 
                 Center]}], 
              If[AnalisiSintattica`Private`showSolution$$, 
               Row[{
                 Style["Soluzione tabella delle produzioni", Bold], 
                 AnalisiSintattica`Private`displayTableSln[
                 AnalisiSintattica`Private`soluzione$$]}, Alignment -> Left], 
               ""]}, Alignment -> Center], " "}], " "}}, Editable -> False], 
      "Specifications" :> {{
        AnalisiSintattica`Private`soluzione$$, ControlType -> None}, {{
         AnalisiSintattica`Private`emptyGrammar$$, {{
           " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", 
            "$"}, {"A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", 
            " ", " ", " ", " ", " "}, {
           "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", 
            " ", " "}, {
           "C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", " ", 
            " ", " ", " "}, {
           "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", 
            " ", " "}}}, ControlType -> None}, {{
         AnalisiSintattica`Private`emptyCheckboxGrammar$$, {{
           " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", 
            "$"}, {"A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", 
            " ", " ", " ", " ", " "}, {
           "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", 
            " ", " "}, {
           "C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", " ", 
            " ", " ", " "}, {
           "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", 
            " ", " "}}}, ControlType -> None}, {{
         AnalisiSintattica`Private`cursor$$, 0}, ControlType -> None}, {{
         AnalisiSintattica`Private`showNullable$$, False, 
          "Mostra Nullable"}, {True, False}}, {{
         AnalisiSintattica`Private`showFirst$$, False, "Mostra First"}, {
         True, False}}, {{
         AnalisiSintattica`Private`showFollow$$, False, "Mostra Follow"}, {
         True, False}}, {{
         AnalisiSintattica`Private`showSolution$$, False, "show solution"}, {
         True, False}}}, "Options" :> {ContentSize -> {900, 900}}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{642., {353.9938232632121, 358.0061767367879}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({AnalisiSintattica`Private`createEmptyGrammar[
         Pattern[AnalisiSintattica`Private`sln, 
          Blank[]]] := 
       Module[{AnalisiSintattica`Private`copy = 
          AnalisiSintattica`Private`sln}, Table[
           If[
            And[
            AnalisiSintattica`Private`i > 1, AnalisiSintattica`Private`j > 1],
             Part[AnalisiSintattica`Private`copy, AnalisiSintattica`Private`i,
               AnalisiSintattica`Private`j] = " "], {
           AnalisiSintattica`Private`i, AnalisiSintattica`Private`rows}, {
           AnalisiSintattica`Private`j, AnalisiSintattica`Private`cols}]; 
         AnalisiSintattica`Private`copy], AnalisiSintattica`Private`i = 5, 
       AnalisiSintattica`Private`j = 2, AnalisiSintattica`Private`rows = 3, 
       AnalisiSintattica`Private`cols = 0, 
       AnalisiSintattica`Private`soluzione$$ = {{
         " ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", 
          "$"}, {"A", "A->a", "A->b", "A->B", "A->B", " ", " ", " ", " ", " ",
           " ", " ", " ", " "}, {
         "B", " ", " ", "B->cC", "B->d", " ", " ", " ", " ", " ", " ", " ", 
          " ", " "}, {
         "C", " ", " ", " ", " ", "C->e", "C->f", "C->g", " ", "C->D", " ", 
          " ", " ", " "}, {
         "D", " ", " ", " ", " ", " ", " ", " ", " ", "D->ih", " ", " ", " ", 
          " "}}, AnalisiSintattica`Private`listaProduzioni = {
        "A \[RightArrow] B", "A \[RightArrow] a", "A \[RightArrow] b", 
         "B \[RightArrow] cC", "B \[RightArrow] d", "C \[RightArrow] f", 
         "C \[RightArrow] e", "C \[RightArrow] D", "C \[RightArrow] g", 
         "D \[RightArrow] ih"}, 
       AnalisiSintattica`Private`tmp = {"A", "B", "C", "D"}, 
       AnalisiSintattica`Private`nullable = {{"A", False}, {"B", False}, {
         "C", False}, {"D", False}}, AnalisiSintattica`Private`displayFirst[
         Pattern[AnalisiSintattica`Private`g, 
          Blank[]]] := 
       Grid[AnalisiSintattica`Private`g, Frame -> All, 
         Background -> {White, White}, ItemStyle -> {Automatic}, 
         ItemSize -> {{2, {2}}}, BaseStyle -> ({Bold} Editable -> False)], 
       AnalisiSintattica`Private`displayFirstSln[
         Pattern[AnalisiSintattica`Private`g, 
          Blank[]]] := 
       AnalisiSintattica`Private`displayFirst[AnalisiSintattica`Private`g], 
       AnalisiSintattica`Private`displayFollow[
         Pattern[AnalisiSintattica`Private`g, 
          Blank[]]] := 
       Grid[AnalisiSintattica`Private`g, Frame -> All, 
         Background -> {White, White}, ItemStyle -> {Automatic}, 
         ItemSize -> {{2, {2}}}, BaseStyle -> ({Bold} Editable -> False)], 
       AnalisiSintattica`Private`displayFollowSln[
         Pattern[AnalisiSintattica`Private`g, 
          Blank[]]] := 
       AnalisiSintattica`Private`displayFollow[AnalisiSintattica`Private`g], 
       AnalisiSintattica`Private`displayTable[
         Pattern[AnalisiSintattica`Private`g, 
          Blank[]], 
         Optional[
          Pattern[AnalisiSintattica`Private`cursor, 
           Blank[]], 0]] := 
       Module[{AnalisiSintattica`Private`backgrounds}, 
         AnalisiSintattica`Private`backgrounds = 
          AnalisiSintattica`Private`xy[AnalisiSintattica`Private`cursor] -> 
           If[AnalisiSintattica`Private`cursor > 0, 
             AnalisiSintattica`Private`checkErrors[
             AnalisiSintattica`Private`g, AnalisiSintattica`Private`cursor]]; 
         Grid[AnalisiSintattica`Private`g, Frame -> If[
             MatchQ[
              AnalisiSintattica`Private`xy[AnalisiSintattica`Private`cursor], 
              Blank[Integer]], All, {
             All, All, {
              AnalisiSintattica`Private`xy[
                AnalisiSintattica`Private`cursor] -> {Thick, Blue}}}], 
           Background -> {
            White, White, AnalisiSintattica`Private`backgrounds}, 
           ItemStyle -> {Automatic}, ItemSize -> {{3, {4}}}, 
           BaseStyle -> {Bold}, Editable -> False]], 
       AnalisiSintattica`Private`xy[
         Pattern[AnalisiSintattica`Private`n, 
          Blank[]]] := {
         AnalisiSintattica`Private`row[AnalisiSintattica`Private`n], 
         AnalisiSintattica`Private`col[AnalisiSintattica`Private`n]}, 
       AnalisiSintattica`Private`row[
         Pattern[AnalisiSintattica`Private`n, 
          Blank[]]] := 
       Quotient[
         AnalisiSintattica`Private`n - 1, AnalisiSintattica`Private`cols] + 1,
        AnalisiSintattica`Private`col[
         Pattern[AnalisiSintattica`Private`n, 
          Blank[]]] := 
       Mod[AnalisiSintattica`Private`n - 1, AnalisiSintattica`Private`cols] + 
        1, AnalisiSintattica`Private`checkErrors[
         Pattern[AnalisiSintattica`Private`g$, 
          Blank[]], 
         Pattern[AnalisiSintattica`Private`cursor$, 
          Blank[]]] := If[Part[AnalisiSintattica`Private`g$, 
           Part[
            AnalisiSintattica`Private`xy[AnalisiSintattica`Private`cursor$], 
            1], 
           Part[
            AnalisiSintattica`Private`xy[AnalisiSintattica`Private`cursor$], 
            2]] != " ", 
         If[Part[AnalisiSintattica`Private`g$, 
            Part[
             AnalisiSintattica`Private`xy[AnalisiSintattica`Private`cursor$], 
             1], 
            Part[
             AnalisiSintattica`Private`xy[AnalisiSintattica`Private`cursor$], 
             2]] != Part[AnalisiSintattica`Private`soluzione$$, 
            Part[
             AnalisiSintattica`Private`xy[AnalisiSintattica`Private`cursor$], 
             1], 
            Part[
             AnalisiSintattica`Private`xy[AnalisiSintattica`Private`cursor$], 
             2]], LightRed]], AnalisiSintattica`Private`loc[{
          Pattern[AnalisiSintattica`Private`x, 
           Blank[]], 
          Pattern[AnalisiSintattica`Private`y, 
           Blank[]]}] := 
       1 + Floor[AnalisiSintattica`Private`cols AnalisiSintattica`Private`x] + 
        AnalisiSintattica`Private`cols 
         Floor[(1 - AnalisiSintattica`Private`y) 
           AnalisiSintattica`Private`rows], 
       AnalisiSintattica`Private`displayTableSln[
         Pattern[AnalisiSintattica`Private`g, 
          Blank[]]] := 
       AnalisiSintattica`Private`displayTable[
        AnalisiSintattica`Private`g, 0]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.8935846021988554`*^9, 3.893584641749818*^9}},
 CellLabel->
  "Out[541]=",ExpressionUUID->"3d5620fa-8455-40db-9441-9afaf7aa93f8"],

Cell[BoxData[
 TemplateBox[{
  "Quotient", "infy", 
   "\"Infinite expression \\!\\(\\*RowBox[{\\\"Quotient\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\"}], \
\\\"]\\\"}]\\) encountered.\"", 2, 542, 244, 27177400342324593241, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8935846437542653`*^9},
 CellLabel->"",ExpressionUUID->"c1b9d148-09cd-4e89-b93a-b12852cb470f"],

Cell[BoxData[
 TemplateBox[{
  "Mod", "indet", 
   "\"Indeterminate expression \\!\\(\\*RowBox[{\\\"Mod\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\"}], \
\\\"]\\\"}]\\) encountered.\"", 2, 542, 245, 27177400342324593241, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8935846437892647`*^9},
 CellLabel->"",ExpressionUUID->"e2613040-e7e5-4689-bfc1-7bbc8377a21b"],

Cell[BoxData[
 TemplateBox[{
  "Quotient", "infy", 
   "\"Infinite expression \\!\\(\\*RowBox[{\\\"Quotient\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\"}], \
\\\"]\\\"}]\\) encountered.\"", 2, 542, 246, 27177400342324593241, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8935846438092985`*^9},
 CellLabel->"",ExpressionUUID->"3522216b-8502-4acf-afde-62ad7788025a"],

Cell[BoxData[
 TemplateBox[{
  "Mod", "indet", 
   "\"Indeterminate expression \\!\\(\\*RowBox[{\\\"Mod\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\"}], \
\\\"]\\\"}]\\) encountered.\"", 2, 542, 247, 27177400342324593241, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8935846438302975`*^9},
 CellLabel->"",ExpressionUUID->"cbb04dc3-4552-408f-bb29-cb08a711ea48"],

Cell[BoxData[
 TemplateBox[{
  "Quotient", "infy", 
   "\"Infinite expression \\!\\(\\*RowBox[{\\\"Quotient\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\"}], \
\\\"]\\\"}]\\) encountered.\"", 2, 542, 248, 27177400342324593241, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.893584643851296*^9},
 CellLabel->"",ExpressionUUID->"427d3b89-0ffa-4da5-a27a-1f3e15a35739"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Quotient\\\", \
\\\"::\\\", \\\"infy\\\"}], \\\"MessageName\\\"]\\) will be suppressed during \
this calculation.\"", 2, 542, 249, 27177400342324593241, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.893584643900338*^9},
 CellLabel->"",ExpressionUUID->"3e4637f7-4595-4ba6-a64d-e6953c28c2c5"],

Cell[BoxData[
 TemplateBox[{
  "Mod", "indet", 
   "\"Indeterminate expression \\!\\(\\*RowBox[{\\\"Mod\\\", \\\"[\\\", \
RowBox[{RowBox[{\\\"-\\\", \\\"1\\\"}], \\\",\\\", \\\"0\\\"}], \
\\\"]\\\"}]\\) encountered.\"", 2, 542, 250, 27177400342324593241, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.89358464396491*^9},
 CellLabel->"",ExpressionUUID->"5655ce60-bfdb-40d6-9c7e-60396920f52c"],

Cell[BoxData[
 TemplateBox[{
  "General", "stop", 
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"Mod\\\", \\\"::\\\", \\\
\"indet\\\"}], \\\"MessageName\\\"]\\) will be suppressed during this \
calculation.\"", 2, 542, 251, 27177400342324593241, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.893584644017815*^9},
 CellLabel->"",ExpressionUUID->"5d3f5733-f575-4648-86d5-c63a411a4123"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["VIII. Bibliografia e Sitografia", "Section",
 CellChangeTimes->{{3.890751429118579*^9, 3.890751439177018*^9}, {
   3.8934347360433364`*^9, 3.893434737253439*^9}, 
   3.893584550804947*^9},ExpressionUUID->"b2b4837b-fa5c-444f-a236-\
91bdca30cda9"],

Cell["\<\
https://www.datatrained.com/post/first-and-follow-in-compiler-design/
https://onlinelibrary.wiley.com/doi/10.1002/spe.4380250705
https://www.codingninjas.com/codestudio/library/first-and-follow-in-compiler-\
design
https://www.geeksforgeeks.org/why-first-and-follow-in-compiler-design/\
\>", "Text",
 CellChangeTimes->{{3.8907514723087015`*^9, 3.890751472587801*^9}, {
  3.893434113816236*^9, 3.893434114621792*^9}, {3.8934342403259935`*^9, 
  3.893434263045288*^9}},ExpressionUUID->"ea59365b-32a6-4981-a1b6-\
5780175d3c7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["IX. Commenti e Lavoro Futuro", "Section",
 CellChangeTimes->{{3.8907514458231473`*^9, 3.8907514547511325`*^9}, {
  3.893434740334592*^9, 3.893434740632352*^9}, {3.893584557370924*^9, 
  3.8935845600618424`*^9}},ExpressionUUID->"e500173f-e44a-4dc9-be86-\
3fd82f12e23e"],

Cell["...", "Text",
 CellChangeTimes->{{3.890751461928514*^9, 
  3.890751462214046*^9}},ExpressionUUID->"fc5c28d2-a05a-4452-9829-\
e1c8d0b78581"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1016.25, 608.25},
WindowMargins->{{0, Automatic}, {0, Automatic}},
Magnification:>0.7 Inherited,
FrontEndVersion->"13.2 for Microsoft Windows (64-bit) (January 30, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"9658fb0a-0c2b-417f-b382-efd4f58f5443"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 198, 2, 68, "Title",ExpressionUUID->"5a1f2e26-4b6a-4ea3-9804-de30c40d3e08"],
Cell[781, 26, 288, 4, 40, "Subtitle",ExpressionUUID->"bb67af07-e1ff-49b5-87b6-4fa053c91c67"],
Cell[1072, 32, 489, 11, 48, "Text",ExpressionUUID->"2cdba1a7-404c-4d69-8992-032295e035a9"],
Cell[1564, 45, 262, 4, 24, "Text",ExpressionUUID->"976b1111-432e-4e8a-94c9-20958d8eff75"],
Cell[1829, 51, 705, 12, 38, "Text",ExpressionUUID->"9274d549-7f68-4c12-8069-8ce7ef4449e9"],
Cell[CellGroupData[{
Cell[2559, 67, 155, 3, 47, "Section",ExpressionUUID->"b994f387-a12f-4dc4-a2dc-dab7aa7f8d43"],
Cell[2717, 72, 2371, 60, 428, "Text",ExpressionUUID->"2588153c-a80c-4091-ba49-2da0194dd30f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5125, 137, 161, 3, 47, "Section",ExpressionUUID->"65fbb34a-22dc-40c9-b3dd-8d79751a7c6a"],
Cell[5289, 142, 2049, 32, 153, "Text",ExpressionUUID->"fb2c88f0-c1a6-4e3a-aa88-2663a01cd7f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7375, 179, 219, 4, 47, "Section",ExpressionUUID->"2064ed3a-6554-4335-b298-0e7d33e63446"],
Cell[CellGroupData[{
Cell[7619, 187, 464, 7, 37, "Subsection",ExpressionUUID->"cff70c90-21a6-4a19-ad04-2134c5b48c8f"],
Cell[8086, 196, 2649, 44, 217, "Text",ExpressionUUID->"831cc4ee-6cc3-429b-99df-c844d749d142"],
Cell[10738, 242, 437, 10, 33, "DisplayFormula",ExpressionUUID->"2524ca1b-2af3-4218-b837-a3dbbb5a345a"],
Cell[11178, 254, 1653, 29, 137, "Text",ExpressionUUID->"9595033e-f004-4aa0-aaf3-e50054ea31e4"],
Cell[12834, 285, 654, 16, 17, "DisplayFormula",ExpressionUUID->"69efaa76-cd62-441d-9972-a5f803b9778b"],
Cell[13491, 303, 249, 4, 24, "Text",ExpressionUUID->"7f70c12b-588f-4672-8e7c-ec43550a3389"],
Cell[13743, 309, 350, 8, 17, "DisplayFormula",ExpressionUUID->"0863eee6-c5bf-4963-9fc5-b8476c0154a0"],
Cell[14096, 319, 618, 12, 56, "Text",ExpressionUUID->"caeb19c3-fba8-4ba8-bc24-c954cf4b54c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14751, 336, 356, 5, 37, "Subsection",ExpressionUUID->"6005e3bd-6347-4db0-bc5d-0a01aa95e20e"],
Cell[15110, 343, 1894, 32, 137, "Text",ExpressionUUID->"8035951f-3f95-47fc-ac68-058de01754a0"],
Cell[17007, 377, 262, 6, 18, "DisplayFormula",ExpressionUUID->"39118365-7d5b-43e3-99e3-3a4a14fab024"],
Cell[17272, 385, 529, 11, 72, "Text",ExpressionUUID->"aa978665-5369-4964-8987-c2ef01f4a074"],
Cell[17804, 398, 437, 10, 33, "DisplayFormula",ExpressionUUID->"70d3cb79-035d-4602-a991-5bbac7d44173"],
Cell[18244, 410, 608, 10, 24, "Text",ExpressionUUID->"c9a3dd01-cb85-4389-b684-97695488f56f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18889, 425, 359, 6, 37, "Subsection",ExpressionUUID->"73ab1766-7a53-4bec-9f86-2a2fc07d233a"],
Cell[19251, 433, 628, 10, 40, "Text",ExpressionUUID->"014820bb-6df9-460d-9b5a-895efe595162"],
Cell[19882, 445, 386, 9, 33, "DisplayFormula",ExpressionUUID->"b26faa46-5045-4df5-9970-7e09dcd51d36"],
Cell[20271, 456, 2582, 51, 337, "Text",ExpressionUUID->"5d9d7106-8588-4618-8e0f-c9d98b41818f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[22902, 513, 159, 3, 47, "Section",ExpressionUUID->"0646fb6f-37b6-4ed3-957d-29a0728cc53c"],
Cell[CellGroupData[{
Cell[23086, 520, 422, 7, 37, "Subsection",ExpressionUUID->"fdf434a1-9f32-4214-b7fb-b421dfb429f1"],
Cell[23511, 529, 1095, 20, 105, "Text",ExpressionUUID->"69ad39df-ffb3-451b-9784-d3cfc8adfd86"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24643, 554, 320, 5, 37, "Subsection",ExpressionUUID->"0bf6c4da-1221-4b0a-969c-c598692c2e8e"],
Cell[24966, 561, 1375, 22, 137, "Text",ExpressionUUID->"957dcab2-83cb-44a3-801e-0bef065d6273"]
}, Open  ]],
Cell[CellGroupData[{
Cell[26378, 588, 314, 5, 37, "Subsection",ExpressionUUID->"890f2930-b3cd-4a49-8261-5a17ca97376b"],
Cell[26695, 595, 1574, 26, 282, "Text",ExpressionUUID->"bcd51cd4-9be4-41fe-b942-57f9f01a9f4f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28318, 627, 159, 3, 47, "Section",ExpressionUUID->"b775610c-d517-4bd7-870f-1f6c36027a95"],
Cell[CellGroupData[{
Cell[28502, 634, 468, 7, 37, "Subsection",ExpressionUUID->"e59a435c-60ac-4a6e-a5c7-e9b47ccff390"],
Cell[28973, 643, 1537, 24, 105, "Text",ExpressionUUID->"5432960b-69a3-4ff1-b477-24c6de744c30"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30547, 672, 345, 5, 37, "Subsection",ExpressionUUID->"46fa9c89-32bd-4862-8ff1-2f9fe1f19c32"],
Cell[30895, 679, 2217, 36, 169, "Text",ExpressionUUID->"86f53269-f156-4951-9a9c-4ad530f4d153"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33149, 720, 339, 5, 37, "Subsection",ExpressionUUID->"c0435769-f0c6-4cbf-b20d-cbba7ad36a95"],
Cell[33491, 727, 1469, 23, 362, "Text",ExpressionUUID->"2d2db8be-b1d3-434e-b2b6-5f0c3638bd78"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[35009, 756, 157, 3, 47, "Section",ExpressionUUID->"4cc23520-cbfd-4a13-87ee-e5eded1b04bd"],
Cell[CellGroupData[{
Cell[35191, 763, 421, 7, 37, "Subsection",ExpressionUUID->"e722abd7-c646-4038-b81d-a9f41e2cd661"],
Cell[35615, 772, 791, 15, 72, "Text",ExpressionUUID->"ef855798-cad4-4986-ab62-63ba9c256773"]
}, Open  ]],
Cell[CellGroupData[{
Cell[36443, 792, 371, 6, 37, "Subsection",ExpressionUUID->"e7ccc2a3-87a4-40d1-b1f4-391cf4060341"],
Cell[36817, 800, 1948, 35, 201, "Text",ExpressionUUID->"4a39c3d8-0e4f-4355-872a-f8ff9dd5054c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38802, 840, 367, 6, 37, "Subsection",ExpressionUUID->"40f29717-1677-4d9f-96fe-4b0a0b81e7ab"],
Cell[39172, 848, 1793, 28, 410, "Text",ExpressionUUID->"004136ee-b984-48d9-b4c0-82c7bb846a9d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[41014, 882, 219, 4, 47, "Section",ExpressionUUID->"8128f560-56af-4906-b20e-f0eb5cee469c"],
Cell[CellGroupData[{
Cell[41258, 890, 351, 5, 37, "Subsection",ExpressionUUID->"61129019-4c6b-42e5-ba5e-736ca23b4903"],
Cell[41612, 897, 1037, 19, 88, "Text",ExpressionUUID->"ea103078-fabb-4a01-8320-03e9c65139dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[42686, 921, 322, 5, 37, "Subsection",ExpressionUUID->"fa22868b-75e1-427f-a7c3-158c9ffb1128"],
Cell[43011, 928, 1388, 25, 137, "Text",ExpressionUUID->"9f5568fa-f41f-4c2a-8683-9cd3fe560f1c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[44436, 958, 259, 4, 37, "Subsection",ExpressionUUID->"641097da-573a-409d-a974-74e1676aee23"],
Cell[44698, 964, 864, 15, 378, "Text",ExpressionUUID->"386cf907-739f-48b3-9a68-1a2fd12fd54a"],
Cell[CellGroupData[{
Cell[45587, 983, 1615, 34, 34, "Input",ExpressionUUID->"667eb9bc-adbe-4b7c-9e07-a4d13843158b"],
Cell[47205, 1019, 887, 18, 81, "Output",ExpressionUUID->"346a669d-f7cf-4741-9ad8-64b544b182d2"]
}, {2}]],
Cell[48104, 1040, 329, 8, 40, "Text",ExpressionUUID->"6f05de30-7087-4357-9e3b-c38102986959"],
Cell[CellGroupData[{
Cell[48458, 1052, 1689, 35, 34, "Input",ExpressionUUID->"eb458662-eedc-4b49-ae2f-c592e586e351"],
Cell[50150, 1089, 931, 19, 81, "Output",ExpressionUUID->"36be9489-537b-4ba2-b2a0-4eb93f92a341"]
}, {2}]],
Cell[51093, 1111, 261, 7, 40, "Text",ExpressionUUID->"348b998a-3fb5-4ba7-bc04-71849f5e1436"],
Cell[CellGroupData[{
Cell[51379, 1122, 1812, 39, 34, "Input",ExpressionUUID->"5cd0d65d-427e-4df3-bc7c-f3b8cf852b51"],
Cell[53194, 1163, 1005, 19, 81, "Output",ExpressionUUID->"b624e5fa-5459-4987-9ae7-634d88709c86"]
}, {2}]],
Cell[54211, 1185, 530, 11, 40, "Text",ExpressionUUID->"8a1a9d3f-b1e9-4792-8a1c-33056bd7db1f"],
Cell[CellGroupData[{
Cell[54766, 1200, 1882, 40, 34, "Input",ExpressionUUID->"578d7f46-198d-4d4d-91fb-48c4e7202d69"],
Cell[56651, 1242, 1046, 19, 81, "Output",ExpressionUUID->"c31d2b4d-c5ed-439e-912c-546ab6528fb7"]
}, {2}]],
Cell[57709, 1264, 390, 9, 40, "Text",ExpressionUUID->"185bc883-8a01-4012-8428-eaaea821465d"],
Cell[CellGroupData[{
Cell[58124, 1277, 1955, 40, 34, "Input",ExpressionUUID->"e47078be-230e-4da9-a28c-810e3bc24e17"],
Cell[60082, 1319, 1101, 21, 81, "Output",ExpressionUUID->"4c02b6bf-3784-44d4-b061-06372d90b1d0"]
}, {2}]],
Cell[61195, 1343, 438, 9, 40, "Text",ExpressionUUID->"c9e7994a-55b3-4556-a764-ff20210c1669"],
Cell[CellGroupData[{
Cell[61658, 1356, 2035, 41, 34, "Input",ExpressionUUID->"2780565f-16fb-4272-a9df-954ddad9201d"],
Cell[63696, 1399, 1150, 22, 81, "Output",ExpressionUUID->"60406f44-cec8-4b78-b618-fcc2c7972924"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[64904, 1428, 331, 5, 47, "Section",ExpressionUUID->"eb32614a-c831-4e59-a181-6bf7143953e4"],
Cell[CellGroupData[{
Cell[65260, 1437, 932, 22, 100, "Input",ExpressionUUID->"bd6adc6e-3164-453c-8bb7-4b2b8673844a"],
Cell[66195, 1461, 663, 13, 20, "Message",ExpressionUUID->"0112aa92-e574-45e8-b5a5-a208ec5e308e"],
Cell[66861, 1476, 23123, 450, 735, "Output",ExpressionUUID->"3d5620fa-8455-40db-9441-9afaf7aa93f8"],
Cell[89987, 1928, 424, 8, 20, "Message",ExpressionUUID->"c1b9d148-09cd-4e89-b93a-b12852cb470f"],
Cell[90414, 1938, 420, 8, 20, "Message",ExpressionUUID->"e2613040-e7e5-4689-bfc1-7bbc8377a21b"],
Cell[90837, 1948, 424, 8, 20, "Message",ExpressionUUID->"3522216b-8502-4acf-afde-62ad7788025a"],
Cell[91264, 1958, 420, 8, 20, "Message",ExpressionUUID->"cbb04dc3-4552-408f-bb29-cb08a711ea48"],
Cell[91687, 1968, 422, 8, 20, "Message",ExpressionUUID->"427d3b89-0ffa-4da5-a27a-1f3e15a35739"],
Cell[92112, 1978, 421, 8, 20, "Message",ExpressionUUID->"3e4637f7-4595-4ba6-a64d-e6953c28c2c5"],
Cell[92536, 1988, 417, 8, 20, "Message",ExpressionUUID->"5655ce60-bfdb-40d6-9c7e-60396920f52c"],
Cell[92956, 1998, 417, 8, 20, "Message",ExpressionUUID->"5d3f5733-f575-4648-86d5-c63a411a4123"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[93422, 2012, 251, 4, 47, "Section",ExpressionUUID->"b2b4837b-fa5c-444f-a236-91bdca30cda9"],
Cell[93676, 2018, 534, 10, 72, "Text",ExpressionUUID->"ea59365b-32a6-4981-a1b6-5780175d3c7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[94247, 2033, 274, 4, 47, "Section",ExpressionUUID->"e500173f-e44a-4dc9-be86-3fd82f12e23e"],
Cell[94524, 2039, 145, 3, 24, "Text",ExpressionUUID->"fc5c28d2-a05a-4452-9829-e1c8d0b78581"]
}, Open  ]]
}, Open  ]]
}
]
*)

